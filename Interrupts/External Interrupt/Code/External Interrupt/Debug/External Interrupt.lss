
External Interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000346  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000039a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000039a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003cc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b8  00000000  00000000  00000408  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b10  00000000  00000000  000004c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000078e  00000000  00000000  00000fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006c7  00000000  00000000  0000175e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000148  00000000  00000000  00001e28  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000048e  00000000  00000000  00001f70  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000071b  00000000  00000000  000023fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00002b19  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__vector_1>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 41 01 	call	0x282	; 0x282 <main>
  64:	0c 94 a1 01 	jmp	0x342	; 0x342 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <SET_Direction>:
#include"DIO_Interface.h"

/*   Function to set the direction of the pin    */
void SET_Direction(u8 port, u8 pin, u8 direction)
{
	switch(port)
  6c:	81 30       	cpi	r24, 0x01	; 1
  6e:	19 f1       	breq	.+70     	; 0xb6 <SET_Direction+0x4a>
  70:	30 f0       	brcs	.+12     	; 0x7e <SET_Direction+0x12>
  72:	82 30       	cpi	r24, 0x02	; 2
  74:	e1 f1       	breq	.+120    	; 0xee <SET_Direction+0x82>
  76:	83 30       	cpi	r24, 0x03	; 3
  78:	09 f4       	brne	.+2      	; 0x7c <SET_Direction+0x10>
  7a:	54 c0       	rjmp	.+168    	; 0x124 <SET_Direction+0xb8>
  7c:	08 95       	ret
	{
	case PORT_A:
		if(direction == INPUT)
  7e:	41 11       	cpse	r20, r1
  80:	0c c0       	rjmp	.+24     	; 0x9a <SET_Direction+0x2e>
		{
			CLR_BIT(DDRA,pin);
  82:	2a b3       	in	r18, 0x1a	; 26
  84:	81 e0       	ldi	r24, 0x01	; 1
  86:	90 e0       	ldi	r25, 0x00	; 0
  88:	02 c0       	rjmp	.+4      	; 0x8e <SET_Direction+0x22>
  8a:	88 0f       	add	r24, r24
  8c:	99 1f       	adc	r25, r25
  8e:	6a 95       	dec	r22
  90:	e2 f7       	brpl	.-8      	; 0x8a <SET_Direction+0x1e>
  92:	80 95       	com	r24
  94:	82 23       	and	r24, r18
  96:	8a bb       	out	0x1a, r24	; 26
  98:	08 95       	ret
		}

		else if(direction == OUTPUT)
  9a:	41 30       	cpi	r20, 0x01	; 1
  9c:	09 f0       	breq	.+2      	; 0xa0 <SET_Direction+0x34>
  9e:	5c c0       	rjmp	.+184    	; 0x158 <SET_Direction+0xec>
		{
			SET_BIT(DDRA,pin);
  a0:	2a b3       	in	r18, 0x1a	; 26
  a2:	81 e0       	ldi	r24, 0x01	; 1
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	02 c0       	rjmp	.+4      	; 0xac <SET_Direction+0x40>
  a8:	88 0f       	add	r24, r24
  aa:	99 1f       	adc	r25, r25
  ac:	6a 95       	dec	r22
  ae:	e2 f7       	brpl	.-8      	; 0xa8 <SET_Direction+0x3c>
  b0:	82 2b       	or	r24, r18
  b2:	8a bb       	out	0x1a, r24	; 26
  b4:	08 95       	ret
		}
		break;

	case PORT_B:
		if(direction == INPUT)
  b6:	41 11       	cpse	r20, r1
  b8:	0c c0       	rjmp	.+24     	; 0xd2 <SET_Direction+0x66>
		{
			CLR_BIT(DDRB,pin);
  ba:	27 b3       	in	r18, 0x17	; 23
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <SET_Direction+0x5a>
  c2:	88 0f       	add	r24, r24
  c4:	99 1f       	adc	r25, r25
  c6:	6a 95       	dec	r22
  c8:	e2 f7       	brpl	.-8      	; 0xc2 <SET_Direction+0x56>
  ca:	80 95       	com	r24
  cc:	82 23       	and	r24, r18
  ce:	87 bb       	out	0x17, r24	; 23
  d0:	08 95       	ret
		}

		else if(direction == OUTPUT)
  d2:	41 30       	cpi	r20, 0x01	; 1
  d4:	09 f0       	breq	.+2      	; 0xd8 <SET_Direction+0x6c>
  d6:	40 c0       	rjmp	.+128    	; 0x158 <SET_Direction+0xec>
		{
			SET_BIT(DDRB,pin);
  d8:	27 b3       	in	r18, 0x17	; 23
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	02 c0       	rjmp	.+4      	; 0xe4 <SET_Direction+0x78>
  e0:	88 0f       	add	r24, r24
  e2:	99 1f       	adc	r25, r25
  e4:	6a 95       	dec	r22
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <SET_Direction+0x74>
  e8:	82 2b       	or	r24, r18
  ea:	87 bb       	out	0x17, r24	; 23
  ec:	08 95       	ret
		}
		break;

	case PORT_C:
		if(direction == INPUT)
  ee:	41 11       	cpse	r20, r1
  f0:	0c c0       	rjmp	.+24     	; 0x10a <SET_Direction+0x9e>
		{
			CLR_BIT(DDRC,pin);
  f2:	24 b3       	in	r18, 0x14	; 20
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	02 c0       	rjmp	.+4      	; 0xfe <SET_Direction+0x92>
  fa:	88 0f       	add	r24, r24
  fc:	99 1f       	adc	r25, r25
  fe:	6a 95       	dec	r22
 100:	e2 f7       	brpl	.-8      	; 0xfa <SET_Direction+0x8e>
 102:	80 95       	com	r24
 104:	82 23       	and	r24, r18
 106:	84 bb       	out	0x14, r24	; 20
 108:	08 95       	ret
		}

		else if(direction == OUTPUT)
 10a:	41 30       	cpi	r20, 0x01	; 1
 10c:	29 f5       	brne	.+74     	; 0x158 <SET_Direction+0xec>
		{
			SET_BIT(DDRC,pin);
 10e:	24 b3       	in	r18, 0x14	; 20
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	02 c0       	rjmp	.+4      	; 0x11a <SET_Direction+0xae>
 116:	88 0f       	add	r24, r24
 118:	99 1f       	adc	r25, r25
 11a:	6a 95       	dec	r22
 11c:	e2 f7       	brpl	.-8      	; 0x116 <SET_Direction+0xaa>
 11e:	82 2b       	or	r24, r18
 120:	84 bb       	out	0x14, r24	; 20
 122:	08 95       	ret
		}
		break;

	case PORT_D:
		if(direction == INPUT)
 124:	41 11       	cpse	r20, r1
 126:	0c c0       	rjmp	.+24     	; 0x140 <SET_Direction+0xd4>
		{
			CLR_BIT(DDRD,pin);
 128:	21 b3       	in	r18, 0x11	; 17
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	02 c0       	rjmp	.+4      	; 0x134 <SET_Direction+0xc8>
 130:	88 0f       	add	r24, r24
 132:	99 1f       	adc	r25, r25
 134:	6a 95       	dec	r22
 136:	e2 f7       	brpl	.-8      	; 0x130 <SET_Direction+0xc4>
 138:	80 95       	com	r24
 13a:	82 23       	and	r24, r18
 13c:	81 bb       	out	0x11, r24	; 17
 13e:	08 95       	ret
		}

		else if(direction == OUTPUT)
 140:	41 30       	cpi	r20, 0x01	; 1
 142:	51 f4       	brne	.+20     	; 0x158 <SET_Direction+0xec>
		{
			SET_BIT(DDRD,pin);
 144:	21 b3       	in	r18, 0x11	; 17
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	02 c0       	rjmp	.+4      	; 0x150 <SET_Direction+0xe4>
 14c:	88 0f       	add	r24, r24
 14e:	99 1f       	adc	r25, r25
 150:	6a 95       	dec	r22
 152:	e2 f7       	brpl	.-8      	; 0x14c <SET_Direction+0xe0>
 154:	82 2b       	or	r24, r18
 156:	81 bb       	out	0x11, r24	; 17
 158:	08 95       	ret

0000015a <SET_Value>:


/*   Function to set the value of the pin    */
void SET_Value(u8 port, u8 pin, u8 value)
{
	switch(port)
 15a:	81 30       	cpi	r24, 0x01	; 1
 15c:	19 f1       	breq	.+70     	; 0x1a4 <SET_Value+0x4a>
 15e:	30 f0       	brcs	.+12     	; 0x16c <SET_Value+0x12>
 160:	82 30       	cpi	r24, 0x02	; 2
 162:	e1 f1       	breq	.+120    	; 0x1dc <SET_Value+0x82>
 164:	83 30       	cpi	r24, 0x03	; 3
 166:	09 f4       	brne	.+2      	; 0x16a <SET_Value+0x10>
 168:	54 c0       	rjmp	.+168    	; 0x212 <SET_Value+0xb8>
 16a:	08 95       	ret
	{
	case PORT_A:
		if(value == LOW)
 16c:	41 11       	cpse	r20, r1
 16e:	0c c0       	rjmp	.+24     	; 0x188 <SET_Value+0x2e>
		{
			CLR_BIT(PORTA,pin);
 170:	2b b3       	in	r18, 0x1b	; 27
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	02 c0       	rjmp	.+4      	; 0x17c <SET_Value+0x22>
 178:	88 0f       	add	r24, r24
 17a:	99 1f       	adc	r25, r25
 17c:	6a 95       	dec	r22
 17e:	e2 f7       	brpl	.-8      	; 0x178 <SET_Value+0x1e>
 180:	80 95       	com	r24
 182:	82 23       	and	r24, r18
 184:	8b bb       	out	0x1b, r24	; 27
 186:	08 95       	ret
		}

		else if(value  == HIGH)
 188:	41 30       	cpi	r20, 0x01	; 1
 18a:	09 f0       	breq	.+2      	; 0x18e <SET_Value+0x34>
 18c:	5c c0       	rjmp	.+184    	; 0x246 <SET_Value+0xec>
		{
			SET_BIT(PORTA,pin);
 18e:	2b b3       	in	r18, 0x1b	; 27
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	02 c0       	rjmp	.+4      	; 0x19a <SET_Value+0x40>
 196:	88 0f       	add	r24, r24
 198:	99 1f       	adc	r25, r25
 19a:	6a 95       	dec	r22
 19c:	e2 f7       	brpl	.-8      	; 0x196 <SET_Value+0x3c>
 19e:	82 2b       	or	r24, r18
 1a0:	8b bb       	out	0x1b, r24	; 27
 1a2:	08 95       	ret
		}
		break;

	case PORT_B:
		if(value == LOW)
 1a4:	41 11       	cpse	r20, r1
 1a6:	0c c0       	rjmp	.+24     	; 0x1c0 <SET_Value+0x66>
		{
			CLR_BIT(PORTB,pin);
 1a8:	28 b3       	in	r18, 0x18	; 24
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <SET_Value+0x5a>
 1b0:	88 0f       	add	r24, r24
 1b2:	99 1f       	adc	r25, r25
 1b4:	6a 95       	dec	r22
 1b6:	e2 f7       	brpl	.-8      	; 0x1b0 <SET_Value+0x56>
 1b8:	80 95       	com	r24
 1ba:	82 23       	and	r24, r18
 1bc:	88 bb       	out	0x18, r24	; 24
 1be:	08 95       	ret
		}

		else if(value == HIGH)
 1c0:	41 30       	cpi	r20, 0x01	; 1
 1c2:	09 f0       	breq	.+2      	; 0x1c6 <SET_Value+0x6c>
 1c4:	40 c0       	rjmp	.+128    	; 0x246 <SET_Value+0xec>
		{
			SET_BIT(PORTB,pin);
 1c6:	28 b3       	in	r18, 0x18	; 24
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <SET_Value+0x78>
 1ce:	88 0f       	add	r24, r24
 1d0:	99 1f       	adc	r25, r25
 1d2:	6a 95       	dec	r22
 1d4:	e2 f7       	brpl	.-8      	; 0x1ce <SET_Value+0x74>
 1d6:	82 2b       	or	r24, r18
 1d8:	88 bb       	out	0x18, r24	; 24
 1da:	08 95       	ret
		}
		break;

	case PORT_C:
		if(value == LOW)
 1dc:	41 11       	cpse	r20, r1
 1de:	0c c0       	rjmp	.+24     	; 0x1f8 <SET_Value+0x9e>
		{
			CLR_BIT(PORTC,pin);
 1e0:	25 b3       	in	r18, 0x15	; 21
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	02 c0       	rjmp	.+4      	; 0x1ec <SET_Value+0x92>
 1e8:	88 0f       	add	r24, r24
 1ea:	99 1f       	adc	r25, r25
 1ec:	6a 95       	dec	r22
 1ee:	e2 f7       	brpl	.-8      	; 0x1e8 <SET_Value+0x8e>
 1f0:	80 95       	com	r24
 1f2:	82 23       	and	r24, r18
 1f4:	85 bb       	out	0x15, r24	; 21
 1f6:	08 95       	ret
		}

		else if(value == HIGH)
 1f8:	41 30       	cpi	r20, 0x01	; 1
 1fa:	29 f5       	brne	.+74     	; 0x246 <SET_Value+0xec>
		{
			SET_BIT(PORTC,pin);
 1fc:	25 b3       	in	r18, 0x15	; 21
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	02 c0       	rjmp	.+4      	; 0x208 <SET_Value+0xae>
 204:	88 0f       	add	r24, r24
 206:	99 1f       	adc	r25, r25
 208:	6a 95       	dec	r22
 20a:	e2 f7       	brpl	.-8      	; 0x204 <SET_Value+0xaa>
 20c:	82 2b       	or	r24, r18
 20e:	85 bb       	out	0x15, r24	; 21
 210:	08 95       	ret
		}
		break;

	case PORT_D:
		if(value == LOW)
 212:	41 11       	cpse	r20, r1
 214:	0c c0       	rjmp	.+24     	; 0x22e <SET_Value+0xd4>
		{
			CLR_BIT(PORTD,pin);
 216:	22 b3       	in	r18, 0x12	; 18
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	02 c0       	rjmp	.+4      	; 0x222 <SET_Value+0xc8>
 21e:	88 0f       	add	r24, r24
 220:	99 1f       	adc	r25, r25
 222:	6a 95       	dec	r22
 224:	e2 f7       	brpl	.-8      	; 0x21e <SET_Value+0xc4>
 226:	80 95       	com	r24
 228:	82 23       	and	r24, r18
 22a:	82 bb       	out	0x12, r24	; 18
 22c:	08 95       	ret
		}

		else if(value == HIGH)
 22e:	41 30       	cpi	r20, 0x01	; 1
 230:	51 f4       	brne	.+20     	; 0x246 <SET_Value+0xec>
		{
			SET_BIT(PORTD,pin);
 232:	22 b3       	in	r18, 0x12	; 18
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	02 c0       	rjmp	.+4      	; 0x23e <SET_Value+0xe4>
 23a:	88 0f       	add	r24, r24
 23c:	99 1f       	adc	r25, r25
 23e:	6a 95       	dec	r22
 240:	e2 f7       	brpl	.-8      	; 0x23a <SET_Value+0xe0>
 242:	82 2b       	or	r24, r18
 244:	82 bb       	out	0x12, r24	; 18
 246:	08 95       	ret

00000248 <EXTI_Enable>:
#include "EXTI_Interface.h"


void EXTI_Enable(u8 INT_NUM)
{
	switch(INT_NUM)
 248:	88 23       	and	r24, r24
 24a:	19 f0       	breq	.+6      	; 0x252 <EXTI_Enable+0xa>
 24c:	81 30       	cpi	r24, 0x01	; 1
 24e:	59 f0       	breq	.+22     	; 0x266 <EXTI_Enable+0x1e>
 250:	08 95       	ret
	{
		case 0:
            #if Sense_Control==LOW_Level
		        CLR_BIT(MCUCR,0);
 252:	85 b7       	in	r24, 0x35	; 53
 254:	8e 7f       	andi	r24, 0xFE	; 254
 256:	85 bf       	out	0x35, r24	; 53
			    CLR_BIT(MCUCR,1);
 258:	85 b7       	in	r24, 0x35	; 53
 25a:	8d 7f       	andi	r24, 0xFD	; 253
 25c:	85 bf       	out	0x35, r24	; 53
                  SET_BIT(MCUCR,0);
                  SET_BIT(MCUCR,1);
           #else
           #error "Wrong Sense Control"
           #endif
		           SET_BIT(GICR,6);
 25e:	8b b7       	in	r24, 0x3b	; 59
 260:	80 64       	ori	r24, 0x40	; 64
 262:	8b bf       	out	0x3b, r24	; 59
                   break;
 264:	08 95       	ret
      
	  	case 1:
            #if Sense_Control==LOW_Level
	  		    CLR_BIT(MCUCR,2);
 266:	85 b7       	in	r24, 0x35	; 53
 268:	8b 7f       	andi	r24, 0xFB	; 251
 26a:	85 bf       	out	0x35, r24	; 53
	  		    CLR_BIT(MCUCR,3);
 26c:	85 b7       	in	r24, 0x35	; 53
 26e:	87 7f       	andi	r24, 0xF7	; 247
 270:	85 bf       	out	0x35, r24	; 53
	  		     SET_BIT(MCUCR,2);
	  		     SET_BIT(MCUCR,3);
            #else
            #error "Wrong Sense_Control"
            #endif
			      SET_BIT(GICR,7);
 272:	8b b7       	in	r24, 0x3b	; 59
 274:	80 68       	ori	r24, 0x80	; 128
 276:	8b bf       	out	0x3b, r24	; 59
 278:	08 95       	ret

0000027a <Interrupt_Enable>:
#include "STD_TYPES.h"
#include "GIE_Interface.h"

void Interrupt_Enable()
{
   SET_BIT(SREG,7);
 27a:	8f b7       	in	r24, 0x3f	; 63
 27c:	80 68       	ori	r24, 0x80	; 128
 27e:	8f bf       	out	0x3f, r24	; 63
 280:	08 95       	ret

00000282 <main>:
#include "DIO_Interface.h"


int main()
{
    SET_Direction(PORT_D,PIN_2,INPUT);
 282:	40 e0       	ldi	r20, 0x00	; 0
 284:	62 e0       	ldi	r22, 0x02	; 2
 286:	83 e0       	ldi	r24, 0x03	; 3
 288:	0e 94 36 00 	call	0x6c	; 0x6c <SET_Direction>
	SET_Direction(PORT_C,PIN_7,OUTPUT);
 28c:	41 e0       	ldi	r20, 0x01	; 1
 28e:	67 e0       	ldi	r22, 0x07	; 7
 290:	82 e0       	ldi	r24, 0x02	; 2
 292:	0e 94 36 00 	call	0x6c	; 0x6c <SET_Direction>
	SET_Value(PORT_D,PIN_2,HIGH);
 296:	41 e0       	ldi	r20, 0x01	; 1
 298:	62 e0       	ldi	r22, 0x02	; 2
 29a:	83 e0       	ldi	r24, 0x03	; 3
 29c:	0e 94 ad 00 	call	0x15a	; 0x15a <SET_Value>
	EXTI_Enable(0); //to enable external interrupt 0
 2a0:	80 e0       	ldi	r24, 0x00	; 0
 2a2:	0e 94 24 01 	call	0x248	; 0x248 <EXTI_Enable>
	Interrupt_Enable(); //for General interrupt enable
 2a6:	0e 94 3d 01 	call	0x27a	; 0x27a <Interrupt_Enable>
	u8 flag=0;
 2aa:	80 e0       	ldi	r24, 0x00	; 0
    while (1) 
    {
		if(flag==0)
 2ac:	81 11       	cpse	r24, r1
 2ae:	07 c0       	rjmp	.+14     	; 0x2be <main+0x3c>
		{
			SET_Value(PORT_C,PIN_7,HIGH);
 2b0:	41 e0       	ldi	r20, 0x01	; 1
 2b2:	67 e0       	ldi	r22, 0x07	; 7
 2b4:	82 e0       	ldi	r24, 0x02	; 2
 2b6:	0e 94 ad 00 	call	0x15a	; 0x15a <SET_Value>
			flag=1;
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	08 c0       	rjmp	.+16     	; 0x2ce <main+0x4c>
		}
		else if(flag==1)
 2be:	81 30       	cpi	r24, 0x01	; 1
 2c0:	31 f4       	brne	.+12     	; 0x2ce <main+0x4c>
		{
			SET_Value(PORT_C,PIN_7,LOW);
 2c2:	40 e0       	ldi	r20, 0x00	; 0
 2c4:	67 e0       	ldi	r22, 0x07	; 7
 2c6:	82 e0       	ldi	r24, 0x02	; 2
 2c8:	0e 94 ad 00 	call	0x15a	; 0x15a <SET_Value>
			flag=0;
 2cc:	80 e0       	ldi	r24, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ce:	2f ef       	ldi	r18, 0xFF	; 255
 2d0:	34 e3       	ldi	r19, 0x34	; 52
 2d2:	9c e0       	ldi	r25, 0x0C	; 12
 2d4:	21 50       	subi	r18, 0x01	; 1
 2d6:	30 40       	sbci	r19, 0x00	; 0
 2d8:	90 40       	sbci	r25, 0x00	; 0
 2da:	e1 f7       	brne	.-8      	; 0x2d4 <main+0x52>
 2dc:	00 c0       	rjmp	.+0      	; 0x2de <main+0x5c>
 2de:	00 00       	nop
 2e0:	e5 cf       	rjmp	.-54     	; 0x2ac <main+0x2a>

000002e2 <__vector_1>:
	return 0;
}

//this  __attribute__((signal)) to tell the processor that is a function called by the hardware
void __vector_1(void)  __attribute__((signal));
void __vector_1(void){
 2e2:	1f 92       	push	r1
 2e4:	0f 92       	push	r0
 2e6:	0f b6       	in	r0, 0x3f	; 63
 2e8:	0f 92       	push	r0
 2ea:	11 24       	eor	r1, r1
 2ec:	2f 93       	push	r18
 2ee:	3f 93       	push	r19
 2f0:	4f 93       	push	r20
 2f2:	5f 93       	push	r21
 2f4:	6f 93       	push	r22
 2f6:	7f 93       	push	r23
 2f8:	8f 93       	push	r24
 2fa:	9f 93       	push	r25
 2fc:	af 93       	push	r26
 2fe:	bf 93       	push	r27
 300:	ef 93       	push	r30
 302:	ff 93       	push	r31
	SET_Value(PORT_C, PIN_7,HIGH);
 304:	41 e0       	ldi	r20, 0x01	; 1
 306:	67 e0       	ldi	r22, 0x07	; 7
 308:	82 e0       	ldi	r24, 0x02	; 2
 30a:	0e 94 ad 00 	call	0x15a	; 0x15a <SET_Value>
 30e:	2f ef       	ldi	r18, 0xFF	; 255
 310:	83 ed       	ldi	r24, 0xD3	; 211
 312:	90 e3       	ldi	r25, 0x30	; 48
 314:	21 50       	subi	r18, 0x01	; 1
 316:	80 40       	sbci	r24, 0x00	; 0
 318:	90 40       	sbci	r25, 0x00	; 0
 31a:	e1 f7       	brne	.-8      	; 0x314 <__vector_1+0x32>
 31c:	00 c0       	rjmp	.+0      	; 0x31e <__vector_1+0x3c>
 31e:	00 00       	nop
	_delay_ms(2000);
}
 320:	ff 91       	pop	r31
 322:	ef 91       	pop	r30
 324:	bf 91       	pop	r27
 326:	af 91       	pop	r26
 328:	9f 91       	pop	r25
 32a:	8f 91       	pop	r24
 32c:	7f 91       	pop	r23
 32e:	6f 91       	pop	r22
 330:	5f 91       	pop	r21
 332:	4f 91       	pop	r20
 334:	3f 91       	pop	r19
 336:	2f 91       	pop	r18
 338:	0f 90       	pop	r0
 33a:	0f be       	out	0x3f, r0	; 63
 33c:	0f 90       	pop	r0
 33e:	1f 90       	pop	r1
 340:	18 95       	reti

00000342 <_exit>:
 342:	f8 94       	cli

00000344 <__stop_program>:
 344:	ff cf       	rjmp	.-2      	; 0x344 <__stop_program>
