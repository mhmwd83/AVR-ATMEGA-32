
Blink_LED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000336  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000003aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  000003aa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003aa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000418  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a55  00000000  00000000  000004e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000072e  00000000  00000000  00000f35  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000618  00000000  00000000  00001663  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000168  00000000  00000000  00001c7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000468  00000000  00000000  00001de4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000640  00000000  00000000  0000224c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  0000288c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__vector_10>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 30 01 	call	0x260	; 0x260 <main>
  74:	0c 94 99 01 	jmp	0x332	; 0x332 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <SET_Direction>:
#include"DIO_Interface.h"

/*   Function to set the direction of the pin    */
void SET_Direction(u8 port, u8 pin, u8 direction)
{
	switch(port)
  7c:	81 30       	cpi	r24, 0x01	; 1
  7e:	19 f1       	breq	.+70     	; 0xc6 <SET_Direction+0x4a>
  80:	30 f0       	brcs	.+12     	; 0x8e <SET_Direction+0x12>
  82:	82 30       	cpi	r24, 0x02	; 2
  84:	e1 f1       	breq	.+120    	; 0xfe <SET_Direction+0x82>
  86:	83 30       	cpi	r24, 0x03	; 3
  88:	09 f4       	brne	.+2      	; 0x8c <SET_Direction+0x10>
  8a:	54 c0       	rjmp	.+168    	; 0x134 <SET_Direction+0xb8>
  8c:	08 95       	ret
	{
	case PORT_A:
		if(direction == INPUT)
  8e:	41 11       	cpse	r20, r1
  90:	0c c0       	rjmp	.+24     	; 0xaa <SET_Direction+0x2e>
		{
			CLR_BIT(DDRA,pin);
  92:	2a b3       	in	r18, 0x1a	; 26
  94:	81 e0       	ldi	r24, 0x01	; 1
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	02 c0       	rjmp	.+4      	; 0x9e <SET_Direction+0x22>
  9a:	88 0f       	add	r24, r24
  9c:	99 1f       	adc	r25, r25
  9e:	6a 95       	dec	r22
  a0:	e2 f7       	brpl	.-8      	; 0x9a <SET_Direction+0x1e>
  a2:	80 95       	com	r24
  a4:	82 23       	and	r24, r18
  a6:	8a bb       	out	0x1a, r24	; 26
  a8:	08 95       	ret
		}

		else if(direction == OUTPUT)
  aa:	41 30       	cpi	r20, 0x01	; 1
  ac:	09 f0       	breq	.+2      	; 0xb0 <SET_Direction+0x34>
  ae:	5c c0       	rjmp	.+184    	; 0x168 <SET_Direction+0xec>
		{
			SET_BIT(DDRA,pin);
  b0:	2a b3       	in	r18, 0x1a	; 26
  b2:	81 e0       	ldi	r24, 0x01	; 1
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	02 c0       	rjmp	.+4      	; 0xbc <SET_Direction+0x40>
  b8:	88 0f       	add	r24, r24
  ba:	99 1f       	adc	r25, r25
  bc:	6a 95       	dec	r22
  be:	e2 f7       	brpl	.-8      	; 0xb8 <SET_Direction+0x3c>
  c0:	82 2b       	or	r24, r18
  c2:	8a bb       	out	0x1a, r24	; 26
  c4:	08 95       	ret
		}
		break;

	case PORT_B:
		if(direction == INPUT)
  c6:	41 11       	cpse	r20, r1
  c8:	0c c0       	rjmp	.+24     	; 0xe2 <SET_Direction+0x66>
		{
			CLR_BIT(DDRB,pin);
  ca:	27 b3       	in	r18, 0x17	; 23
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <SET_Direction+0x5a>
  d2:	88 0f       	add	r24, r24
  d4:	99 1f       	adc	r25, r25
  d6:	6a 95       	dec	r22
  d8:	e2 f7       	brpl	.-8      	; 0xd2 <SET_Direction+0x56>
  da:	80 95       	com	r24
  dc:	82 23       	and	r24, r18
  de:	87 bb       	out	0x17, r24	; 23
  e0:	08 95       	ret
		}

		else if(direction == OUTPUT)
  e2:	41 30       	cpi	r20, 0x01	; 1
  e4:	09 f0       	breq	.+2      	; 0xe8 <SET_Direction+0x6c>
  e6:	40 c0       	rjmp	.+128    	; 0x168 <SET_Direction+0xec>
		{
			SET_BIT(DDRB,pin);
  e8:	27 b3       	in	r18, 0x17	; 23
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	02 c0       	rjmp	.+4      	; 0xf4 <SET_Direction+0x78>
  f0:	88 0f       	add	r24, r24
  f2:	99 1f       	adc	r25, r25
  f4:	6a 95       	dec	r22
  f6:	e2 f7       	brpl	.-8      	; 0xf0 <SET_Direction+0x74>
  f8:	82 2b       	or	r24, r18
  fa:	87 bb       	out	0x17, r24	; 23
  fc:	08 95       	ret
		}
		break;

	case PORT_C:
		if(direction == INPUT)
  fe:	41 11       	cpse	r20, r1
 100:	0c c0       	rjmp	.+24     	; 0x11a <SET_Direction+0x9e>
		{
			CLR_BIT(DDRC,pin);
 102:	24 b3       	in	r18, 0x14	; 20
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	02 c0       	rjmp	.+4      	; 0x10e <SET_Direction+0x92>
 10a:	88 0f       	add	r24, r24
 10c:	99 1f       	adc	r25, r25
 10e:	6a 95       	dec	r22
 110:	e2 f7       	brpl	.-8      	; 0x10a <SET_Direction+0x8e>
 112:	80 95       	com	r24
 114:	82 23       	and	r24, r18
 116:	84 bb       	out	0x14, r24	; 20
 118:	08 95       	ret
		}

		else if(direction == OUTPUT)
 11a:	41 30       	cpi	r20, 0x01	; 1
 11c:	29 f5       	brne	.+74     	; 0x168 <SET_Direction+0xec>
		{
			SET_BIT(DDRC,pin);
 11e:	24 b3       	in	r18, 0x14	; 20
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	02 c0       	rjmp	.+4      	; 0x12a <SET_Direction+0xae>
 126:	88 0f       	add	r24, r24
 128:	99 1f       	adc	r25, r25
 12a:	6a 95       	dec	r22
 12c:	e2 f7       	brpl	.-8      	; 0x126 <SET_Direction+0xaa>
 12e:	82 2b       	or	r24, r18
 130:	84 bb       	out	0x14, r24	; 20
 132:	08 95       	ret
		}
		break;

	case PORT_D:
		if(direction == INPUT)
 134:	41 11       	cpse	r20, r1
 136:	0c c0       	rjmp	.+24     	; 0x150 <SET_Direction+0xd4>
		{
			CLR_BIT(DDRD,pin);
 138:	21 b3       	in	r18, 0x11	; 17
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	02 c0       	rjmp	.+4      	; 0x144 <SET_Direction+0xc8>
 140:	88 0f       	add	r24, r24
 142:	99 1f       	adc	r25, r25
 144:	6a 95       	dec	r22
 146:	e2 f7       	brpl	.-8      	; 0x140 <SET_Direction+0xc4>
 148:	80 95       	com	r24
 14a:	82 23       	and	r24, r18
 14c:	81 bb       	out	0x11, r24	; 17
 14e:	08 95       	ret
		}

		else if(direction == OUTPUT)
 150:	41 30       	cpi	r20, 0x01	; 1
 152:	51 f4       	brne	.+20     	; 0x168 <SET_Direction+0xec>
		{
			SET_BIT(DDRD,pin);
 154:	21 b3       	in	r18, 0x11	; 17
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	02 c0       	rjmp	.+4      	; 0x160 <SET_Direction+0xe4>
 15c:	88 0f       	add	r24, r24
 15e:	99 1f       	adc	r25, r25
 160:	6a 95       	dec	r22
 162:	e2 f7       	brpl	.-8      	; 0x15c <SET_Direction+0xe0>
 164:	82 2b       	or	r24, r18
 166:	81 bb       	out	0x11, r24	; 17
 168:	08 95       	ret

0000016a <SET_Value>:


/*   Function to set the value of the pin    */
void SET_Value(u8 port, u8 pin, u8 value)
{
	switch(port)
 16a:	81 30       	cpi	r24, 0x01	; 1
 16c:	19 f1       	breq	.+70     	; 0x1b4 <SET_Value+0x4a>
 16e:	30 f0       	brcs	.+12     	; 0x17c <SET_Value+0x12>
 170:	82 30       	cpi	r24, 0x02	; 2
 172:	e1 f1       	breq	.+120    	; 0x1ec <SET_Value+0x82>
 174:	83 30       	cpi	r24, 0x03	; 3
 176:	09 f4       	brne	.+2      	; 0x17a <SET_Value+0x10>
 178:	54 c0       	rjmp	.+168    	; 0x222 <SET_Value+0xb8>
 17a:	08 95       	ret
	{
	case PORT_A:
		if(value == LOW)
 17c:	41 11       	cpse	r20, r1
 17e:	0c c0       	rjmp	.+24     	; 0x198 <SET_Value+0x2e>
		{
			CLR_BIT(PORTA,pin);
 180:	2b b3       	in	r18, 0x1b	; 27
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	02 c0       	rjmp	.+4      	; 0x18c <SET_Value+0x22>
 188:	88 0f       	add	r24, r24
 18a:	99 1f       	adc	r25, r25
 18c:	6a 95       	dec	r22
 18e:	e2 f7       	brpl	.-8      	; 0x188 <SET_Value+0x1e>
 190:	80 95       	com	r24
 192:	82 23       	and	r24, r18
 194:	8b bb       	out	0x1b, r24	; 27
 196:	08 95       	ret
		}

		else if(value  == HIGH)
 198:	41 30       	cpi	r20, 0x01	; 1
 19a:	09 f0       	breq	.+2      	; 0x19e <SET_Value+0x34>
 19c:	5c c0       	rjmp	.+184    	; 0x256 <SET_Value+0xec>
		{
			SET_BIT(PORTA,pin);
 19e:	2b b3       	in	r18, 0x1b	; 27
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	02 c0       	rjmp	.+4      	; 0x1aa <SET_Value+0x40>
 1a6:	88 0f       	add	r24, r24
 1a8:	99 1f       	adc	r25, r25
 1aa:	6a 95       	dec	r22
 1ac:	e2 f7       	brpl	.-8      	; 0x1a6 <SET_Value+0x3c>
 1ae:	82 2b       	or	r24, r18
 1b0:	8b bb       	out	0x1b, r24	; 27
 1b2:	08 95       	ret
		}
		break;

	case PORT_B:
		if(value == LOW)
 1b4:	41 11       	cpse	r20, r1
 1b6:	0c c0       	rjmp	.+24     	; 0x1d0 <SET_Value+0x66>
		{
			CLR_BIT(PORTB,pin);
 1b8:	28 b3       	in	r18, 0x18	; 24
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	02 c0       	rjmp	.+4      	; 0x1c4 <SET_Value+0x5a>
 1c0:	88 0f       	add	r24, r24
 1c2:	99 1f       	adc	r25, r25
 1c4:	6a 95       	dec	r22
 1c6:	e2 f7       	brpl	.-8      	; 0x1c0 <SET_Value+0x56>
 1c8:	80 95       	com	r24
 1ca:	82 23       	and	r24, r18
 1cc:	88 bb       	out	0x18, r24	; 24
 1ce:	08 95       	ret
		}

		else if(value == HIGH)
 1d0:	41 30       	cpi	r20, 0x01	; 1
 1d2:	09 f0       	breq	.+2      	; 0x1d6 <SET_Value+0x6c>
 1d4:	40 c0       	rjmp	.+128    	; 0x256 <SET_Value+0xec>
		{
			SET_BIT(PORTB,pin);
 1d6:	28 b3       	in	r18, 0x18	; 24
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <SET_Value+0x78>
 1de:	88 0f       	add	r24, r24
 1e0:	99 1f       	adc	r25, r25
 1e2:	6a 95       	dec	r22
 1e4:	e2 f7       	brpl	.-8      	; 0x1de <SET_Value+0x74>
 1e6:	82 2b       	or	r24, r18
 1e8:	88 bb       	out	0x18, r24	; 24
 1ea:	08 95       	ret
		}
		
		break;

	case PORT_C:
		if(value == LOW)
 1ec:	41 11       	cpse	r20, r1
 1ee:	0c c0       	rjmp	.+24     	; 0x208 <SET_Value+0x9e>
		{
			CLR_BIT(PORTC,pin);
 1f0:	25 b3       	in	r18, 0x15	; 21
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	02 c0       	rjmp	.+4      	; 0x1fc <SET_Value+0x92>
 1f8:	88 0f       	add	r24, r24
 1fa:	99 1f       	adc	r25, r25
 1fc:	6a 95       	dec	r22
 1fe:	e2 f7       	brpl	.-8      	; 0x1f8 <SET_Value+0x8e>
 200:	80 95       	com	r24
 202:	82 23       	and	r24, r18
 204:	85 bb       	out	0x15, r24	; 21
 206:	08 95       	ret
		}

		else if(value == HIGH)
 208:	41 30       	cpi	r20, 0x01	; 1
 20a:	29 f5       	brne	.+74     	; 0x256 <SET_Value+0xec>
		{
			SET_BIT(PORTC,pin);
 20c:	25 b3       	in	r18, 0x15	; 21
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	02 c0       	rjmp	.+4      	; 0x218 <SET_Value+0xae>
 214:	88 0f       	add	r24, r24
 216:	99 1f       	adc	r25, r25
 218:	6a 95       	dec	r22
 21a:	e2 f7       	brpl	.-8      	; 0x214 <SET_Value+0xaa>
 21c:	82 2b       	or	r24, r18
 21e:	85 bb       	out	0x15, r24	; 21
 220:	08 95       	ret
		}
		break;

	case PORT_D:
		if(value == LOW)
 222:	41 11       	cpse	r20, r1
 224:	0c c0       	rjmp	.+24     	; 0x23e <SET_Value+0xd4>
		{
			CLR_BIT(PORTD,pin);
 226:	22 b3       	in	r18, 0x12	; 18
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	02 c0       	rjmp	.+4      	; 0x232 <SET_Value+0xc8>
 22e:	88 0f       	add	r24, r24
 230:	99 1f       	adc	r25, r25
 232:	6a 95       	dec	r22
 234:	e2 f7       	brpl	.-8      	; 0x22e <SET_Value+0xc4>
 236:	80 95       	com	r24
 238:	82 23       	and	r24, r18
 23a:	82 bb       	out	0x12, r24	; 18
 23c:	08 95       	ret
		}

		else if(value == HIGH)
 23e:	41 30       	cpi	r20, 0x01	; 1
 240:	51 f4       	brne	.+20     	; 0x256 <SET_Value+0xec>
		{
			SET_BIT(PORTD,pin);
 242:	22 b3       	in	r18, 0x12	; 18
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	02 c0       	rjmp	.+4      	; 0x24e <SET_Value+0xe4>
 24a:	88 0f       	add	r24, r24
 24c:	99 1f       	adc	r25, r25
 24e:	6a 95       	dec	r22
 250:	e2 f7       	brpl	.-8      	; 0x24a <SET_Value+0xe0>
 252:	82 2b       	or	r24, r18
 254:	82 bb       	out	0x12, r24	; 18
 256:	08 95       	ret

00000258 <Interrupt_Enable>:

#include"BIT_OP.h"
#include"STD_TYPES.h"
#include"GIE_Interface.h"
void Interrupt_Enable(){
	SET_BIT(SREG,7);
 258:	8f b7       	in	r24, 0x3f	; 63
 25a:	80 68       	ori	r24, 0x80	; 128
 25c:	8f bf       	out	0x3f, r24	; 63
 25e:	08 95       	ret

00000260 <main>:

#define F_CPU 8000000UL //8MHz Clock frequency


int main(){
	SET_Direction(PORT_C, PIN_7, OUTPUT);
 260:	41 e0       	ldi	r20, 0x01	; 1
 262:	67 e0       	ldi	r22, 0x07	; 7
 264:	82 e0       	ldi	r24, 0x02	; 2
 266:	0e 94 3e 00 	call	0x7c	; 0x7c <SET_Direction>
	Timer_Set_CTC(250);
 26a:	8a ef       	ldi	r24, 0xFA	; 250
 26c:	0e 94 97 01 	call	0x32e	; 0x32e <Timer_Set_CTC>
	Timer_Init();
 270:	0e 94 7e 01 	call	0x2fc	; 0x2fc <Timer_Init>
	Interrupt_Enable();
 274:	0e 94 2c 01 	call	0x258	; 0x258 <Interrupt_Enable>
 278:	ff cf       	rjmp	.-2      	; 0x278 <main+0x18>

0000027a <__vector_10>:
	}
	return 0;
}

void __vector_10(void)  __attribute__((signal));
void __vector_10(void){
 27a:	1f 92       	push	r1
 27c:	0f 92       	push	r0
 27e:	0f b6       	in	r0, 0x3f	; 63
 280:	0f 92       	push	r0
 282:	11 24       	eor	r1, r1
 284:	2f 93       	push	r18
 286:	3f 93       	push	r19
 288:	4f 93       	push	r20
 28a:	5f 93       	push	r21
 28c:	6f 93       	push	r22
 28e:	7f 93       	push	r23
 290:	8f 93       	push	r24
 292:	9f 93       	push	r25
 294:	af 93       	push	r26
 296:	bf 93       	push	r27
 298:	ef 93       	push	r30
 29a:	ff 93       	push	r31
	static u8 flag=0;
	static u8 count =0;
	count++;
 29c:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <count.1634>
 2a0:	8f 5f       	subi	r24, 0xFF	; 255
 2a2:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <count.1634>
	if(count==250){
 2a6:	8a 3f       	cpi	r24, 0xFA	; 250
 2a8:	c1 f4       	brne	.+48     	; 0x2da <__vector_10+0x60>
		if(flag==0){
 2aa:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2ae:	81 11       	cpse	r24, r1
 2b0:	09 c0       	rjmp	.+18     	; 0x2c4 <__vector_10+0x4a>
			SET_Value(PORT_C, PIN_7, HIGH);
 2b2:	41 e0       	ldi	r20, 0x01	; 1
 2b4:	67 e0       	ldi	r22, 0x07	; 7
 2b6:	82 e0       	ldi	r24, 0x02	; 2
 2b8:	0e 94 b5 00 	call	0x16a	; 0x16a <SET_Value>
			flag=1;
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 2c2:	0b c0       	rjmp	.+22     	; 0x2da <__vector_10+0x60>

		}
		else if(flag==1){
 2c4:	81 30       	cpi	r24, 0x01	; 1
 2c6:	49 f4       	brne	.+18     	; 0x2da <__vector_10+0x60>
			SET_Value(PORT_C, PIN_7, LOW);
 2c8:	40 e0       	ldi	r20, 0x00	; 0
 2ca:	67 e0       	ldi	r22, 0x07	; 7
 2cc:	82 e0       	ldi	r24, 0x02	; 2
 2ce:	0e 94 b5 00 	call	0x16a	; 0x16a <SET_Value>
			flag=0;
 2d2:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>

			count=0;
 2d6:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <count.1634>
		}
	}

}
 2da:	ff 91       	pop	r31
 2dc:	ef 91       	pop	r30
 2de:	bf 91       	pop	r27
 2e0:	af 91       	pop	r26
 2e2:	9f 91       	pop	r25
 2e4:	8f 91       	pop	r24
 2e6:	7f 91       	pop	r23
 2e8:	6f 91       	pop	r22
 2ea:	5f 91       	pop	r21
 2ec:	4f 91       	pop	r20
 2ee:	3f 91       	pop	r19
 2f0:	2f 91       	pop	r18
 2f2:	0f 90       	pop	r0
 2f4:	0f be       	out	0x3f, r0	; 63
 2f6:	0f 90       	pop	r0
 2f8:	1f 90       	pop	r1
 2fa:	18 95       	reti

000002fc <Timer_Init>:
	#elif Timer_Interrupt_Enable==CTC_Mode_Interrupt
	SET_BIT(TIMSK,1);
	#endif
}
void Timer_Set_Preload(u8 Preload_value){
	TCNT0=Preload_value;
 2fc:	83 b7       	in	r24, 0x33	; 51
 2fe:	88 60       	ori	r24, 0x08	; 8
 300:	83 bf       	out	0x33, r24	; 51
 302:	83 b7       	in	r24, 0x33	; 51
 304:	8f 7b       	andi	r24, 0xBF	; 191
 306:	83 bf       	out	0x33, r24	; 51
 308:	83 b7       	in	r24, 0x33	; 51
 30a:	8f 7d       	andi	r24, 0xDF	; 223
 30c:	83 bf       	out	0x33, r24	; 51
 30e:	83 b7       	in	r24, 0x33	; 51
 310:	8f 7e       	andi	r24, 0xEF	; 239
 312:	83 bf       	out	0x33, r24	; 51
 314:	83 b7       	in	r24, 0x33	; 51
 316:	84 60       	ori	r24, 0x04	; 4
 318:	83 bf       	out	0x33, r24	; 51
 31a:	83 b7       	in	r24, 0x33	; 51
 31c:	8d 7f       	andi	r24, 0xFD	; 253
 31e:	83 bf       	out	0x33, r24	; 51
 320:	83 b7       	in	r24, 0x33	; 51
 322:	8e 7f       	andi	r24, 0xFE	; 254
 324:	83 bf       	out	0x33, r24	; 51
 326:	89 b7       	in	r24, 0x39	; 57
 328:	82 60       	ori	r24, 0x02	; 2
 32a:	89 bf       	out	0x39, r24	; 57
 32c:	08 95       	ret

0000032e <Timer_Set_CTC>:
}
void Timer_Set_CTC(u8 CTC_Value){
	OCR0=CTC_Value;
 32e:	8c bf       	out	0x3c, r24	; 60
 330:	08 95       	ret

00000332 <_exit>:
 332:	f8 94       	cli

00000334 <__stop_program>:
 334:	ff cf       	rjmp	.-2      	; 0x334 <__stop_program>
