
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000056e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  0000056e  000005e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000005f0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000620  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b8  00000000  00000000  0000065c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f05  00000000  00000000  00000714  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007bb  00000000  00000000  00001619  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000076b  00000000  00000000  00001dd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000015c  00000000  00000000  00002540  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000048c  00000000  00000000  0000269c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000095a  00000000  00000000  00002b28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  00003482  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e6       	ldi	r30, 0x6E	; 110
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 88 02 	call	0x510	; 0x510 <main>
  7a:	0c 94 b5 02 	jmp	0x56a	; 0x56a <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <SET_Direction>:
			PORTC |= value;
			break;

	case PORT_D:
			PORTD &= 0xF0;
			PORTD |= value;
  82:	81 30       	cpi	r24, 0x01	; 1
  84:	19 f1       	breq	.+70     	; 0xcc <SET_Direction+0x4a>
  86:	30 f0       	brcs	.+12     	; 0x94 <SET_Direction+0x12>
  88:	82 30       	cpi	r24, 0x02	; 2
  8a:	e1 f1       	breq	.+120    	; 0x104 <SET_Direction+0x82>
  8c:	83 30       	cpi	r24, 0x03	; 3
  8e:	09 f4       	brne	.+2      	; 0x92 <SET_Direction+0x10>
  90:	54 c0       	rjmp	.+168    	; 0x13a <SET_Direction+0xb8>
  92:	08 95       	ret
  94:	41 11       	cpse	r20, r1
  96:	0c c0       	rjmp	.+24     	; 0xb0 <SET_Direction+0x2e>
  98:	2a b3       	in	r18, 0x1a	; 26
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	02 c0       	rjmp	.+4      	; 0xa4 <SET_Direction+0x22>
  a0:	88 0f       	add	r24, r24
  a2:	99 1f       	adc	r25, r25
  a4:	6a 95       	dec	r22
  a6:	e2 f7       	brpl	.-8      	; 0xa0 <SET_Direction+0x1e>
  a8:	80 95       	com	r24
  aa:	82 23       	and	r24, r18
  ac:	8a bb       	out	0x1a, r24	; 26
  ae:	08 95       	ret
  b0:	41 30       	cpi	r20, 0x01	; 1
  b2:	09 f0       	breq	.+2      	; 0xb6 <SET_Direction+0x34>
  b4:	5c c0       	rjmp	.+184    	; 0x16e <SET_Direction+0xec>
  b6:	2a b3       	in	r18, 0x1a	; 26
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <SET_Direction+0x40>
  be:	88 0f       	add	r24, r24
  c0:	99 1f       	adc	r25, r25
  c2:	6a 95       	dec	r22
  c4:	e2 f7       	brpl	.-8      	; 0xbe <SET_Direction+0x3c>
  c6:	82 2b       	or	r24, r18
  c8:	8a bb       	out	0x1a, r24	; 26
  ca:	08 95       	ret
  cc:	41 11       	cpse	r20, r1
  ce:	0c c0       	rjmp	.+24     	; 0xe8 <SET_Direction+0x66>
  d0:	27 b3       	in	r18, 0x17	; 23
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	02 c0       	rjmp	.+4      	; 0xdc <SET_Direction+0x5a>
  d8:	88 0f       	add	r24, r24
  da:	99 1f       	adc	r25, r25
  dc:	6a 95       	dec	r22
  de:	e2 f7       	brpl	.-8      	; 0xd8 <SET_Direction+0x56>
  e0:	80 95       	com	r24
  e2:	82 23       	and	r24, r18
  e4:	87 bb       	out	0x17, r24	; 23
  e6:	08 95       	ret
  e8:	41 30       	cpi	r20, 0x01	; 1
  ea:	09 f0       	breq	.+2      	; 0xee <SET_Direction+0x6c>
  ec:	40 c0       	rjmp	.+128    	; 0x16e <SET_Direction+0xec>
  ee:	27 b3       	in	r18, 0x17	; 23
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	02 c0       	rjmp	.+4      	; 0xfa <SET_Direction+0x78>
  f6:	88 0f       	add	r24, r24
  f8:	99 1f       	adc	r25, r25
  fa:	6a 95       	dec	r22
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <SET_Direction+0x74>
  fe:	82 2b       	or	r24, r18
 100:	87 bb       	out	0x17, r24	; 23
 102:	08 95       	ret
 104:	41 11       	cpse	r20, r1
 106:	0c c0       	rjmp	.+24     	; 0x120 <SET_Direction+0x9e>
 108:	24 b3       	in	r18, 0x14	; 20
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	02 c0       	rjmp	.+4      	; 0x114 <SET_Direction+0x92>
 110:	88 0f       	add	r24, r24
 112:	99 1f       	adc	r25, r25
 114:	6a 95       	dec	r22
 116:	e2 f7       	brpl	.-8      	; 0x110 <SET_Direction+0x8e>
 118:	80 95       	com	r24
 11a:	82 23       	and	r24, r18
 11c:	84 bb       	out	0x14, r24	; 20
 11e:	08 95       	ret
 120:	41 30       	cpi	r20, 0x01	; 1
 122:	29 f5       	brne	.+74     	; 0x16e <SET_Direction+0xec>
 124:	24 b3       	in	r18, 0x14	; 20
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	02 c0       	rjmp	.+4      	; 0x130 <SET_Direction+0xae>
 12c:	88 0f       	add	r24, r24
 12e:	99 1f       	adc	r25, r25
 130:	6a 95       	dec	r22
 132:	e2 f7       	brpl	.-8      	; 0x12c <SET_Direction+0xaa>
 134:	82 2b       	or	r24, r18
 136:	84 bb       	out	0x14, r24	; 20
 138:	08 95       	ret
 13a:	41 11       	cpse	r20, r1
 13c:	0c c0       	rjmp	.+24     	; 0x156 <SET_Direction+0xd4>
 13e:	21 b3       	in	r18, 0x11	; 17
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	02 c0       	rjmp	.+4      	; 0x14a <SET_Direction+0xc8>
 146:	88 0f       	add	r24, r24
 148:	99 1f       	adc	r25, r25
 14a:	6a 95       	dec	r22
 14c:	e2 f7       	brpl	.-8      	; 0x146 <SET_Direction+0xc4>
 14e:	80 95       	com	r24
 150:	82 23       	and	r24, r18
 152:	81 bb       	out	0x11, r24	; 17
 154:	08 95       	ret
 156:	41 30       	cpi	r20, 0x01	; 1
 158:	51 f4       	brne	.+20     	; 0x16e <SET_Direction+0xec>
 15a:	21 b3       	in	r18, 0x11	; 17
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	02 c0       	rjmp	.+4      	; 0x166 <SET_Direction+0xe4>
 162:	88 0f       	add	r24, r24
 164:	99 1f       	adc	r25, r25
 166:	6a 95       	dec	r22
 168:	e2 f7       	brpl	.-8      	; 0x162 <SET_Direction+0xe0>
 16a:	82 2b       	or	r24, r18
 16c:	81 bb       	out	0x11, r24	; 17
 16e:	08 95       	ret

00000170 <SET_Value>:
 170:	81 30       	cpi	r24, 0x01	; 1
 172:	19 f1       	breq	.+70     	; 0x1ba <SET_Value+0x4a>
 174:	30 f0       	brcs	.+12     	; 0x182 <SET_Value+0x12>
 176:	82 30       	cpi	r24, 0x02	; 2
 178:	e1 f1       	breq	.+120    	; 0x1f2 <SET_Value+0x82>
 17a:	83 30       	cpi	r24, 0x03	; 3
 17c:	09 f4       	brne	.+2      	; 0x180 <SET_Value+0x10>
 17e:	54 c0       	rjmp	.+168    	; 0x228 <SET_Value+0xb8>
 180:	08 95       	ret
 182:	41 11       	cpse	r20, r1
 184:	0c c0       	rjmp	.+24     	; 0x19e <SET_Value+0x2e>
 186:	2b b3       	in	r18, 0x1b	; 27
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	02 c0       	rjmp	.+4      	; 0x192 <SET_Value+0x22>
 18e:	88 0f       	add	r24, r24
 190:	99 1f       	adc	r25, r25
 192:	6a 95       	dec	r22
 194:	e2 f7       	brpl	.-8      	; 0x18e <SET_Value+0x1e>
 196:	80 95       	com	r24
 198:	82 23       	and	r24, r18
 19a:	8b bb       	out	0x1b, r24	; 27
 19c:	08 95       	ret
 19e:	41 30       	cpi	r20, 0x01	; 1
 1a0:	09 f0       	breq	.+2      	; 0x1a4 <SET_Value+0x34>
 1a2:	5c c0       	rjmp	.+184    	; 0x25c <SET_Value+0xec>
 1a4:	2b b3       	in	r18, 0x1b	; 27
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <SET_Value+0x40>
 1ac:	88 0f       	add	r24, r24
 1ae:	99 1f       	adc	r25, r25
 1b0:	6a 95       	dec	r22
 1b2:	e2 f7       	brpl	.-8      	; 0x1ac <SET_Value+0x3c>
 1b4:	82 2b       	or	r24, r18
 1b6:	8b bb       	out	0x1b, r24	; 27
 1b8:	08 95       	ret
 1ba:	41 11       	cpse	r20, r1
 1bc:	0c c0       	rjmp	.+24     	; 0x1d6 <SET_Value+0x66>
 1be:	28 b3       	in	r18, 0x18	; 24
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	02 c0       	rjmp	.+4      	; 0x1ca <SET_Value+0x5a>
 1c6:	88 0f       	add	r24, r24
 1c8:	99 1f       	adc	r25, r25
 1ca:	6a 95       	dec	r22
 1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <SET_Value+0x56>
 1ce:	80 95       	com	r24
 1d0:	82 23       	and	r24, r18
 1d2:	88 bb       	out	0x18, r24	; 24
 1d4:	08 95       	ret
 1d6:	41 30       	cpi	r20, 0x01	; 1
 1d8:	09 f0       	breq	.+2      	; 0x1dc <SET_Value+0x6c>
 1da:	40 c0       	rjmp	.+128    	; 0x25c <SET_Value+0xec>
 1dc:	28 b3       	in	r18, 0x18	; 24
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <SET_Value+0x78>
 1e4:	88 0f       	add	r24, r24
 1e6:	99 1f       	adc	r25, r25
 1e8:	6a 95       	dec	r22
 1ea:	e2 f7       	brpl	.-8      	; 0x1e4 <SET_Value+0x74>
 1ec:	82 2b       	or	r24, r18
 1ee:	88 bb       	out	0x18, r24	; 24
 1f0:	08 95       	ret
 1f2:	41 11       	cpse	r20, r1
 1f4:	0c c0       	rjmp	.+24     	; 0x20e <SET_Value+0x9e>
 1f6:	25 b3       	in	r18, 0x15	; 21
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <SET_Value+0x92>
 1fe:	88 0f       	add	r24, r24
 200:	99 1f       	adc	r25, r25
 202:	6a 95       	dec	r22
 204:	e2 f7       	brpl	.-8      	; 0x1fe <SET_Value+0x8e>
 206:	80 95       	com	r24
 208:	82 23       	and	r24, r18
 20a:	85 bb       	out	0x15, r24	; 21
 20c:	08 95       	ret
 20e:	41 30       	cpi	r20, 0x01	; 1
 210:	29 f5       	brne	.+74     	; 0x25c <SET_Value+0xec>
 212:	25 b3       	in	r18, 0x15	; 21
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	02 c0       	rjmp	.+4      	; 0x21e <SET_Value+0xae>
 21a:	88 0f       	add	r24, r24
 21c:	99 1f       	adc	r25, r25
 21e:	6a 95       	dec	r22
 220:	e2 f7       	brpl	.-8      	; 0x21a <SET_Value+0xaa>
 222:	82 2b       	or	r24, r18
 224:	85 bb       	out	0x15, r24	; 21
 226:	08 95       	ret
 228:	41 11       	cpse	r20, r1
 22a:	0c c0       	rjmp	.+24     	; 0x244 <SET_Value+0xd4>
 22c:	22 b3       	in	r18, 0x12	; 18
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	02 c0       	rjmp	.+4      	; 0x238 <SET_Value+0xc8>
 234:	88 0f       	add	r24, r24
 236:	99 1f       	adc	r25, r25
 238:	6a 95       	dec	r22
 23a:	e2 f7       	brpl	.-8      	; 0x234 <SET_Value+0xc4>
 23c:	80 95       	com	r24
 23e:	82 23       	and	r24, r18
 240:	82 bb       	out	0x12, r24	; 18
 242:	08 95       	ret
 244:	41 30       	cpi	r20, 0x01	; 1
 246:	51 f4       	brne	.+20     	; 0x25c <SET_Value+0xec>
 248:	22 b3       	in	r18, 0x12	; 18
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	02 c0       	rjmp	.+4      	; 0x254 <SET_Value+0xe4>
 250:	88 0f       	add	r24, r24
 252:	99 1f       	adc	r25, r25
 254:	6a 95       	dec	r22
 256:	e2 f7       	brpl	.-8      	; 0x250 <SET_Value+0xe0>
 258:	82 2b       	or	r24, r18
 25a:	82 bb       	out	0x12, r24	; 18
 25c:	08 95       	ret

0000025e <SET_Direction_4MSB>:
 25e:	81 30       	cpi	r24, 0x01	; 1
 260:	91 f0       	breq	.+36     	; 0x286 <SET_Direction_4MSB+0x28>
 262:	28 f0       	brcs	.+10     	; 0x26e <SET_Direction_4MSB+0x10>
 264:	82 30       	cpi	r24, 0x02	; 2
 266:	d9 f0       	breq	.+54     	; 0x29e <SET_Direction_4MSB+0x40>
 268:	83 30       	cpi	r24, 0x03	; 3
 26a:	29 f1       	breq	.+74     	; 0x2b6 <SET_Direction_4MSB+0x58>
 26c:	08 95       	ret
 26e:	61 11       	cpse	r22, r1
 270:	04 c0       	rjmp	.+8      	; 0x27a <SET_Direction_4MSB+0x1c>
 272:	8a b3       	in	r24, 0x1a	; 26
 274:	8f 70       	andi	r24, 0x0F	; 15
 276:	8a bb       	out	0x1a, r24	; 26
 278:	08 95       	ret
 27a:	61 30       	cpi	r22, 0x01	; 1
 27c:	39 f5       	brne	.+78     	; 0x2cc <SET_Direction_4MSB+0x6e>
 27e:	8a b3       	in	r24, 0x1a	; 26
 280:	80 6f       	ori	r24, 0xF0	; 240
 282:	8a bb       	out	0x1a, r24	; 26
 284:	08 95       	ret
 286:	61 11       	cpse	r22, r1
 288:	04 c0       	rjmp	.+8      	; 0x292 <SET_Direction_4MSB+0x34>
 28a:	87 b3       	in	r24, 0x17	; 23
 28c:	8f 70       	andi	r24, 0x0F	; 15
 28e:	87 bb       	out	0x17, r24	; 23
 290:	08 95       	ret
 292:	61 30       	cpi	r22, 0x01	; 1
 294:	d9 f4       	brne	.+54     	; 0x2cc <SET_Direction_4MSB+0x6e>
 296:	87 b3       	in	r24, 0x17	; 23
 298:	80 6f       	ori	r24, 0xF0	; 240
 29a:	87 bb       	out	0x17, r24	; 23
 29c:	08 95       	ret
 29e:	61 11       	cpse	r22, r1
 2a0:	04 c0       	rjmp	.+8      	; 0x2aa <SET_Direction_4MSB+0x4c>
 2a2:	84 b3       	in	r24, 0x14	; 20
 2a4:	8f 70       	andi	r24, 0x0F	; 15
 2a6:	84 bb       	out	0x14, r24	; 20
 2a8:	08 95       	ret
 2aa:	61 30       	cpi	r22, 0x01	; 1
 2ac:	79 f4       	brne	.+30     	; 0x2cc <SET_Direction_4MSB+0x6e>
 2ae:	84 b3       	in	r24, 0x14	; 20
 2b0:	80 6f       	ori	r24, 0xF0	; 240
 2b2:	84 bb       	out	0x14, r24	; 20
 2b4:	08 95       	ret
 2b6:	61 11       	cpse	r22, r1
 2b8:	04 c0       	rjmp	.+8      	; 0x2c2 <SET_Direction_4MSB+0x64>
 2ba:	81 b3       	in	r24, 0x11	; 17
 2bc:	8f 70       	andi	r24, 0x0F	; 15
 2be:	81 bb       	out	0x11, r24	; 17
 2c0:	08 95       	ret
 2c2:	61 30       	cpi	r22, 0x01	; 1
 2c4:	19 f4       	brne	.+6      	; 0x2cc <SET_Direction_4MSB+0x6e>
 2c6:	81 b3       	in	r24, 0x11	; 17
 2c8:	80 6f       	ori	r24, 0xF0	; 240
 2ca:	81 bb       	out	0x11, r24	; 17
 2cc:	08 95       	ret

000002ce <SET_Value_4MSB>:
}

/*   Function to set the value of the 4MSB pins    */
void SET_Value_4MSB(u8 port, u8 value)
{
	switch(port)
 2ce:	81 30       	cpi	r24, 0x01	; 1
 2d0:	89 f0       	breq	.+34     	; 0x2f4 <SET_Value_4MSB+0x26>
 2d2:	28 f0       	brcs	.+10     	; 0x2de <SET_Value_4MSB+0x10>
 2d4:	82 30       	cpi	r24, 0x02	; 2
 2d6:	c9 f0       	breq	.+50     	; 0x30a <SET_Value_4MSB+0x3c>
 2d8:	83 30       	cpi	r24, 0x03	; 3
 2da:	11 f1       	breq	.+68     	; 0x320 <SET_Value_4MSB+0x52>
 2dc:	08 95       	ret
	{
		case PORT_A:
		PORTA &= 0x0F;
 2de:	8b b3       	in	r24, 0x1b	; 27
 2e0:	8f 70       	andi	r24, 0x0F	; 15
 2e2:	8b bb       	out	0x1b, r24	; 27
		PORTA |= value<<4;
 2e4:	8b b3       	in	r24, 0x1b	; 27
 2e6:	90 e1       	ldi	r25, 0x10	; 16
 2e8:	69 9f       	mul	r22, r25
 2ea:	b0 01       	movw	r22, r0
 2ec:	11 24       	eor	r1, r1
 2ee:	68 2b       	or	r22, r24
 2f0:	6b bb       	out	0x1b, r22	; 27
		break;
 2f2:	08 95       	ret

		case PORT_B:
		PORTB &= 0x0F;
 2f4:	88 b3       	in	r24, 0x18	; 24
 2f6:	8f 70       	andi	r24, 0x0F	; 15
 2f8:	88 bb       	out	0x18, r24	; 24
		PORTB |= value<<4;
 2fa:	88 b3       	in	r24, 0x18	; 24
 2fc:	90 e1       	ldi	r25, 0x10	; 16
 2fe:	69 9f       	mul	r22, r25
 300:	b0 01       	movw	r22, r0
 302:	11 24       	eor	r1, r1
 304:	68 2b       	or	r22, r24
 306:	68 bb       	out	0x18, r22	; 24
		break;
 308:	08 95       	ret
		
		case PORT_C:
		PORTC &= 0x0F;
 30a:	85 b3       	in	r24, 0x15	; 21
 30c:	8f 70       	andi	r24, 0x0F	; 15
 30e:	85 bb       	out	0x15, r24	; 21
		PORTC |= value<<4;
 310:	85 b3       	in	r24, 0x15	; 21
 312:	90 e1       	ldi	r25, 0x10	; 16
 314:	69 9f       	mul	r22, r25
 316:	b0 01       	movw	r22, r0
 318:	11 24       	eor	r1, r1
 31a:	68 2b       	or	r22, r24
 31c:	65 bb       	out	0x15, r22	; 21
		break;
 31e:	08 95       	ret

		case PORT_D:
		PORTD &= 0x0F;
 320:	82 b3       	in	r24, 0x12	; 18
 322:	8f 70       	andi	r24, 0x0F	; 15
 324:	82 bb       	out	0x12, r24	; 18
		PORTD |= value<<4;
 326:	82 b3       	in	r24, 0x12	; 18
 328:	90 e1       	ldi	r25, 0x10	; 16
 32a:	69 9f       	mul	r22, r25
 32c:	b0 01       	movw	r22, r0
 32e:	11 24       	eor	r1, r1
 330:	68 2b       	or	r22, r24
 332:	62 bb       	out	0x12, r22	; 18
 334:	08 95       	ret

00000336 <LCD_SendCommands>:
	LCD_SendCommands(Entry_Mode);     //send Entry Mode for 4LSB
}

//Send Commands Function
void LCD_SendCommands(u8 Command)
{   //RS pin connected to PORT C pin 0
 336:	cf 93       	push	r28
 338:	c8 2f       	mov	r28, r24
	SET_Value(PORT_C,PIN_0,LOW);      //Set RS pin to zero for write operation
 33a:	40 e0       	ldi	r20, 0x00	; 0
 33c:	60 e0       	ldi	r22, 0x00	; 0
 33e:	82 e0       	ldi	r24, 0x02	; 2
 340:	0e 94 b8 00 	call	0x170	; 0x170 <SET_Value>
	
	//RW pin connected to PORT C pin 1
	SET_Value(PORT_C,PIN_1,LOW);     //Set RW pin to zero for write operation
 344:	40 e0       	ldi	r20, 0x00	; 0
 346:	61 e0       	ldi	r22, 0x01	; 1
 348:	82 e0       	ldi	r24, 0x02	; 2
 34a:	0e 94 b8 00 	call	0x170	; 0x170 <SET_Value>
	
	//Data pins connected to the 4MSB of PORT C
	SET_Value_4MSB(PORT_C,Command); //Send command to the MSB of PORT C
 34e:	6c 2f       	mov	r22, r28
 350:	82 e0       	ldi	r24, 0x02	; 2
 352:	0e 94 67 01 	call	0x2ce	; 0x2ce <SET_Value_4MSB>
	
	//EN pin connected to PORT C pin 2
	SET_Value(PORT_C,PIN_2,HIGH); //Set EN pin to 1 
 356:	41 e0       	ldi	r20, 0x01	; 1
 358:	62 e0       	ldi	r22, 0x02	; 2
 35a:	82 e0       	ldi	r24, 0x02	; 2
 35c:	0e 94 b8 00 	call	0x170	; 0x170 <SET_Value>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 360:	8f e0       	ldi	r24, 0x0F	; 15
 362:	97 e2       	ldi	r25, 0x27	; 39
 364:	01 97       	sbiw	r24, 0x01	; 1
 366:	f1 f7       	brne	.-4      	; 0x364 <LCD_SendCommands+0x2e>
 368:	00 c0       	rjmp	.+0      	; 0x36a <LCD_SendCommands+0x34>
 36a:	00 00       	nop
	
	//Delay for 5 m sec
	_delay_ms(5);
	
	//EN pin connected to PORT C pin 2
	SET_Value(PORT_C,PIN_2,LOW); //Set EN pin to 0 
 36c:	40 e0       	ldi	r20, 0x00	; 0
 36e:	62 e0       	ldi	r22, 0x02	; 2
 370:	82 e0       	ldi	r24, 0x02	; 2
 372:	0e 94 b8 00 	call	0x170	; 0x170 <SET_Value>
 376:	8f ec       	ldi	r24, 0xCF	; 207
 378:	97 e0       	ldi	r25, 0x07	; 7
 37a:	01 97       	sbiw	r24, 0x01	; 1
 37c:	f1 f7       	brne	.-4      	; 0x37a <LCD_SendCommands+0x44>
 37e:	00 c0       	rjmp	.+0      	; 0x380 <LCD_SendCommands+0x4a>
 380:	00 00       	nop
	
	//Delay for 1 m sec
	_delay_ms(1);
}
 382:	cf 91       	pop	r28
 384:	08 95       	ret

00000386 <LCD_Init>:
#include <util/delay.h>  // For delay function

//LCD Initialization Function
void LCD_Init()
{
	LCD_SendCommands(Function_SET>>4);   //send 4MSB
 386:	82 e0       	ldi	r24, 0x02	; 2
 388:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_SendCommands>
	LCD_SendCommands(Function_SET>>4);  //send 4MSB again
 38c:	82 e0       	ldi	r24, 0x02	; 2
 38e:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_SendCommands>
	LCD_SendCommands(Function_SET);    //send 4LSB
 392:	88 e2       	ldi	r24, 0x28	; 40
 394:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_SendCommands>
	LCD_SendCommands(Display_ON_OFF>>4);    //send ON-OFF for 4LSB
 398:	80 e0       	ldi	r24, 0x00	; 0
 39a:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_SendCommands>
	LCD_SendCommands(Display_ON_OFF);      //send ON-OFF for 4LSB
 39e:	8f e0       	ldi	r24, 0x0F	; 15
 3a0:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_SendCommands>
	LCD_SendCommands(Display_Clear>>4);    //send Clear for 4LSB
 3a4:	80 e0       	ldi	r24, 0x00	; 0
 3a6:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_SendCommands>
	LCD_SendCommands(Display_Clear);      //send Clear for 4LSB
 3aa:	81 e0       	ldi	r24, 0x01	; 1
 3ac:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_SendCommands>
 3b0:	8f e9       	ldi	r24, 0x9F	; 159
 3b2:	9f e0       	ldi	r25, 0x0F	; 15
 3b4:	01 97       	sbiw	r24, 0x01	; 1
 3b6:	f1 f7       	brne	.-4      	; 0x3b4 <LCD_Init+0x2e>
 3b8:	00 c0       	rjmp	.+0      	; 0x3ba <LCD_Init+0x34>
 3ba:	00 00       	nop
	_delay_ms(2);
	LCD_SendCommands(Entry_Mode>>4);   //send Entry Mode for 4MSB
 3bc:	80 e0       	ldi	r24, 0x00	; 0
 3be:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_SendCommands>
	LCD_SendCommands(Entry_Mode);     //send Entry Mode for 4LSB
 3c2:	86 e0       	ldi	r24, 0x06	; 6
 3c4:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_SendCommands>
 3c8:	08 95       	ret

000003ca <LCD_SendData>:
	_delay_ms(1);
}

//Send Data Function
void LCD_SendData(u8 Data)
{   //RS pin connected to PORT C pin 0
 3ca:	cf 93       	push	r28
 3cc:	c8 2f       	mov	r28, r24
	SET_Value(PORT_C,PIN_0,HIGH);      //Set RS pin to one for write operation
 3ce:	41 e0       	ldi	r20, 0x01	; 1
 3d0:	60 e0       	ldi	r22, 0x00	; 0
 3d2:	82 e0       	ldi	r24, 0x02	; 2
 3d4:	0e 94 b8 00 	call	0x170	; 0x170 <SET_Value>
	
	//RW pin connected to PORT C pin 1
	SET_Value(PORT_C,PIN_1,LOW);     //Set RW pin to zero for write operation
 3d8:	40 e0       	ldi	r20, 0x00	; 0
 3da:	61 e0       	ldi	r22, 0x01	; 1
 3dc:	82 e0       	ldi	r24, 0x02	; 2
 3de:	0e 94 b8 00 	call	0x170	; 0x170 <SET_Value>
	
	//Data pins connected to the 4MSB of PORT C
	SET_Value_4MSB(PORT_C,Data); //Send command to the MSB of PORT C
 3e2:	6c 2f       	mov	r22, r28
 3e4:	82 e0       	ldi	r24, 0x02	; 2
 3e6:	0e 94 67 01 	call	0x2ce	; 0x2ce <SET_Value_4MSB>
    
	//EN pin connected to PORT C pin 2
	SET_Value(PORT_C,PIN_2,HIGH); //Set EN pin to 1
 3ea:	41 e0       	ldi	r20, 0x01	; 1
 3ec:	62 e0       	ldi	r22, 0x02	; 2
 3ee:	82 e0       	ldi	r24, 0x02	; 2
 3f0:	0e 94 b8 00 	call	0x170	; 0x170 <SET_Value>
 3f4:	8f e0       	ldi	r24, 0x0F	; 15
 3f6:	97 e2       	ldi	r25, 0x27	; 39
 3f8:	01 97       	sbiw	r24, 0x01	; 1
 3fa:	f1 f7       	brne	.-4      	; 0x3f8 <LCD_SendData+0x2e>
 3fc:	00 c0       	rjmp	.+0      	; 0x3fe <LCD_SendData+0x34>
 3fe:	00 00       	nop
	
	//Delay for 5 msec
	_delay_ms(5);
	
	//EN pin connected to PORT C pin 2
	SET_Value(PORT_C,PIN_2,LOW); //Set EN pin to 0
 400:	40 e0       	ldi	r20, 0x00	; 0
 402:	62 e0       	ldi	r22, 0x02	; 2
 404:	82 e0       	ldi	r24, 0x02	; 2
 406:	0e 94 b8 00 	call	0x170	; 0x170 <SET_Value>
 40a:	8f ec       	ldi	r24, 0xCF	; 207
 40c:	97 e0       	ldi	r25, 0x07	; 7
 40e:	01 97       	sbiw	r24, 0x01	; 1
 410:	f1 f7       	brne	.-4      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 412:	00 c0       	rjmp	.+0      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 414:	00 00       	nop
	
	//Delay for 1 m sec
	_delay_ms(1);
}
 416:	cf 91       	pop	r28
 418:	08 95       	ret

0000041a <LCD_SendData_4BitMode>:

//Send Data with 4bits Function
void LCD_SendData_4BitMode(u8 Data)
{
 41a:	cf 93       	push	r28
 41c:	c8 2f       	mov	r28, r24
	LCD_SendData(Data>>4); //Send 4MSB first
 41e:	82 95       	swap	r24
 420:	8f 70       	andi	r24, 0x0F	; 15
 422:	0e 94 e5 01 	call	0x3ca	; 0x3ca <LCD_SendData>
	LCD_SendData(Data);   //Send 4LSB second
 426:	8c 2f       	mov	r24, r28
 428:	0e 94 e5 01 	call	0x3ca	; 0x3ca <LCD_SendData>
}
 42c:	cf 91       	pop	r28
 42e:	08 95       	ret

00000430 <LCD_SendNumbers>:

//Send Number Function
void LCD_SendNumbers(u16 Number)
{
 430:	1f 93       	push	r17
 432:	cf 93       	push	r28
 434:	df 93       	push	r29
 436:	00 d0       	rcall	.+0      	; 0x438 <LCD_SendNumbers+0x8>
 438:	00 d0       	rcall	.+0      	; 0x43a <LCD_SendNumbers+0xa>
 43a:	1f 92       	push	r1
 43c:	cd b7       	in	r28, 0x3d	; 61
 43e:	de b7       	in	r29, 0x3e	; 62
 440:	ac 01       	movw	r20, r24
	u8 arr[5];
	u8 i =0;
	if (Number == 0)
 442:	89 2b       	or	r24, r25
 444:	21 f4       	brne	.+8      	; 0x44e <LCD_SendNumbers+0x1e>
	   {
	     LCD_SendData_4BitMode('0');		
 446:	80 e3       	ldi	r24, 0x30	; 48
 448:	0e 94 0d 02 	call	0x41a	; 0x41a <LCD_SendData_4BitMode>
 44c:	42 c0       	rjmp	.+132    	; 0x4d2 <LCD_SendNumbers+0xa2>
 44e:	10 e0       	ldi	r17, 0x00	; 0
 450:	01 c0       	rjmp	.+2      	; 0x454 <LCD_SendNumbers+0x24>
       {
	      while(Number !=0)
	     {
		   arr[i]= Number %10;
		   Number /= 10;
		   i++;
 452:	18 2f       	mov	r17, r24
	    }
   else
       {
	      while(Number !=0)
	     {
		   arr[i]= Number %10;
 454:	9a 01       	movw	r18, r20
 456:	ad ec       	ldi	r26, 0xCD	; 205
 458:	bc ec       	ldi	r27, 0xCC	; 204
 45a:	0e 94 a6 02 	call	0x54c	; 0x54c <__umulhisi3>
 45e:	96 95       	lsr	r25
 460:	87 95       	ror	r24
 462:	96 95       	lsr	r25
 464:	87 95       	ror	r24
 466:	96 95       	lsr	r25
 468:	87 95       	ror	r24
 46a:	9c 01       	movw	r18, r24
 46c:	22 0f       	add	r18, r18
 46e:	33 1f       	adc	r19, r19
 470:	88 0f       	add	r24, r24
 472:	99 1f       	adc	r25, r25
 474:	88 0f       	add	r24, r24
 476:	99 1f       	adc	r25, r25
 478:	88 0f       	add	r24, r24
 47a:	99 1f       	adc	r25, r25
 47c:	82 0f       	add	r24, r18
 47e:	93 1f       	adc	r25, r19
 480:	9a 01       	movw	r18, r20
 482:	28 1b       	sub	r18, r24
 484:	39 0b       	sbc	r19, r25
 486:	e1 e0       	ldi	r30, 0x01	; 1
 488:	f0 e0       	ldi	r31, 0x00	; 0
 48a:	ec 0f       	add	r30, r28
 48c:	fd 1f       	adc	r31, r29
 48e:	e1 0f       	add	r30, r17
 490:	f1 1d       	adc	r31, r1
 492:	20 83       	st	Z, r18
		   Number /= 10;
 494:	9a 01       	movw	r18, r20
 496:	0e 94 a6 02 	call	0x54c	; 0x54c <__umulhisi3>
 49a:	ac 01       	movw	r20, r24
 49c:	56 95       	lsr	r21
 49e:	47 95       	ror	r20
 4a0:	56 95       	lsr	r21
 4a2:	47 95       	ror	r20
 4a4:	56 95       	lsr	r21
 4a6:	47 95       	ror	r20
		   i++;
 4a8:	81 e0       	ldi	r24, 0x01	; 1
 4aa:	81 0f       	add	r24, r17
	   {
	     LCD_SendData_4BitMode('0');		
	    }
   else
       {
	      while(Number !=0)
 4ac:	41 15       	cp	r20, r1
 4ae:	51 05       	cpc	r21, r1
 4b0:	81 f6       	brne	.-96     	; 0x452 <LCD_SendNumbers+0x22>
		   i++;
	      }
        }
		
	//for send array as reversed 
	for(s8 j=i-1;j>=0;j--)
 4b2:	11 23       	and	r17, r17
 4b4:	74 f0       	brlt	.+28     	; 0x4d2 <LCD_SendNumbers+0xa2>
	{
     LCD_SendData_4BitMode(arr[j]+48);	
 4b6:	e1 e0       	ldi	r30, 0x01	; 1
 4b8:	f0 e0       	ldi	r31, 0x00	; 0
 4ba:	ec 0f       	add	r30, r28
 4bc:	fd 1f       	adc	r31, r29
 4be:	e1 0f       	add	r30, r17
 4c0:	f1 1d       	adc	r31, r1
 4c2:	17 fd       	sbrc	r17, 7
 4c4:	fa 95       	dec	r31
 4c6:	80 81       	ld	r24, Z
 4c8:	80 5d       	subi	r24, 0xD0	; 208
 4ca:	0e 94 0d 02 	call	0x41a	; 0x41a <LCD_SendData_4BitMode>
 4ce:	11 50       	subi	r17, 0x01	; 1
		   i++;
	      }
        }
		
	//for send array as reversed 
	for(s8 j=i-1;j>=0;j--)
 4d0:	92 f7       	brpl	.-28     	; 0x4b6 <LCD_SendNumbers+0x86>
	{
     LCD_SendData_4BitMode(arr[j]+48);	
	}
}
 4d2:	0f 90       	pop	r0
 4d4:	0f 90       	pop	r0
 4d6:	0f 90       	pop	r0
 4d8:	0f 90       	pop	r0
 4da:	0f 90       	pop	r0
 4dc:	df 91       	pop	r29
 4de:	cf 91       	pop	r28
 4e0:	1f 91       	pop	r17
 4e2:	08 95       	ret

000004e4 <LCD_String>:


//Send String Function
void LCD_String(char *String)
{   
 4e4:	0f 93       	push	r16
 4e6:	1f 93       	push	r17
 4e8:	cf 93       	push	r28
 4ea:	fc 01       	movw	r30, r24
	for(u8 i=0;String[i] != 0;i++)
 4ec:	80 81       	ld	r24, Z
 4ee:	88 23       	and	r24, r24
 4f0:	59 f0       	breq	.+22     	; 0x508 <LCD_String+0x24>
 4f2:	8f 01       	movw	r16, r30
 4f4:	c0 e0       	ldi	r28, 0x00	; 0
	{
		LCD_SendData_4BitMode(String[i]);
 4f6:	0e 94 0d 02 	call	0x41a	; 0x41a <LCD_SendData_4BitMode>


//Send String Function
void LCD_String(char *String)
{   
	for(u8 i=0;String[i] != 0;i++)
 4fa:	cf 5f       	subi	r28, 0xFF	; 255
 4fc:	f8 01       	movw	r30, r16
 4fe:	ec 0f       	add	r30, r28
 500:	f1 1d       	adc	r31, r1
 502:	80 81       	ld	r24, Z
 504:	81 11       	cpse	r24, r1
 506:	f7 cf       	rjmp	.-18     	; 0x4f6 <LCD_String+0x12>
	{
		LCD_SendData_4BitMode(String[i]);
	}
}
 508:	cf 91       	pop	r28
 50a:	1f 91       	pop	r17
 50c:	0f 91       	pop	r16
 50e:	08 95       	ret

00000510 <main>:
#include"DIO_Interface.h"
#include"LCD_Interface.h"

int main()
{
	SET_Direction(PORT_C,PIN_0,OUTPUT);    //Set RS pin to PIN 0
 510:	41 e0       	ldi	r20, 0x01	; 1
 512:	60 e0       	ldi	r22, 0x00	; 0
 514:	82 e0       	ldi	r24, 0x02	; 2
 516:	0e 94 41 00 	call	0x82	; 0x82 <SET_Direction>
	SET_Direction(PORT_C,PIN_1,OUTPUT);   //Set RW pin to PIN 1
 51a:	41 e0       	ldi	r20, 0x01	; 1
 51c:	61 e0       	ldi	r22, 0x01	; 1
 51e:	82 e0       	ldi	r24, 0x02	; 2
 520:	0e 94 41 00 	call	0x82	; 0x82 <SET_Direction>
    SET_Direction(PORT_C,PIN_2,OUTPUT);  //Set EN pin to PIN 2
 524:	41 e0       	ldi	r20, 0x01	; 1
 526:	62 e0       	ldi	r22, 0x02	; 2
 528:	82 e0       	ldi	r24, 0x02	; 2
 52a:	0e 94 41 00 	call	0x82	; 0x82 <SET_Direction>
	SET_Direction_4MSB(PORT_C,OUTPUT);  //Set D4 to D7 pina as data PINs
 52e:	61 e0       	ldi	r22, 0x01	; 1
 530:	82 e0       	ldi	r24, 0x02	; 2
 532:	0e 94 2f 01 	call	0x25e	; 0x25e <SET_Direction_4MSB>
	LCD_Init();  /* Initialize LCD */ 
 536:	0e 94 c3 01 	call	0x386	; 0x386 <LCD_Init>
	LCD_String("MahmoudGamal"); /* Write a string on 1st line of LCD*/ 
 53a:	80 e6       	ldi	r24, 0x60	; 96
 53c:	90 e0       	ldi	r25, 0x00	; 0
 53e:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_String>
	LCD_SendNumbers(1993); /* Write a string on 1st line of LCD*/ 
 542:	89 ec       	ldi	r24, 0xC9	; 201
 544:	97 e0       	ldi	r25, 0x07	; 7
 546:	0e 94 18 02 	call	0x430	; 0x430 <LCD_SendNumbers>
 54a:	ff cf       	rjmp	.-2      	; 0x54a <main+0x3a>

0000054c <__umulhisi3>:
 54c:	a2 9f       	mul	r26, r18
 54e:	b0 01       	movw	r22, r0
 550:	b3 9f       	mul	r27, r19
 552:	c0 01       	movw	r24, r0
 554:	a3 9f       	mul	r26, r19
 556:	70 0d       	add	r23, r0
 558:	81 1d       	adc	r24, r1
 55a:	11 24       	eor	r1, r1
 55c:	91 1d       	adc	r25, r1
 55e:	b2 9f       	mul	r27, r18
 560:	70 0d       	add	r23, r0
 562:	81 1d       	adc	r24, r1
 564:	11 24       	eor	r1, r1
 566:	91 1d       	adc	r25, r1
 568:	08 95       	ret

0000056a <_exit>:
 56a:	f8 94       	cli

0000056c <__stop_program>:
 56c:	ff cf       	rjmp	.-2      	; 0x56c <__stop_program>
