
Keypad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000646  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000646  000006ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000006ca  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006fc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d8  00000000  00000000  00000738  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001197  00000000  00000000  00000810  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000091d  00000000  00000000  000019a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000941  00000000  00000000  000022c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000019c  00000000  00000000  00002c08  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004b6  00000000  00000000  00002da4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a76  00000000  00000000  0000325a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  00003cd0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e4       	ldi	r30, 0x46	; 70
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 f5 02 	call	0x5ea	; 0x5ea <main>
  7a:	0c 94 21 03 	jmp	0x642	; 0x642 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <SET_Direction>:
#include"DIO_Interface.h"

/*   Function to set the direction of the pin    */
void SET_Direction(u8 port, u8 pin, u8 direction)
{
	switch(port)
  82:	81 30       	cpi	r24, 0x01	; 1
  84:	19 f1       	breq	.+70     	; 0xcc <SET_Direction+0x4a>
  86:	30 f0       	brcs	.+12     	; 0x94 <SET_Direction+0x12>
  88:	82 30       	cpi	r24, 0x02	; 2
  8a:	e1 f1       	breq	.+120    	; 0x104 <SET_Direction+0x82>
  8c:	83 30       	cpi	r24, 0x03	; 3
  8e:	09 f4       	brne	.+2      	; 0x92 <SET_Direction+0x10>
  90:	54 c0       	rjmp	.+168    	; 0x13a <SET_Direction+0xb8>
  92:	08 95       	ret
	{
	case PORT_A:
		if(direction == INPUT)
  94:	41 11       	cpse	r20, r1
  96:	0c c0       	rjmp	.+24     	; 0xb0 <SET_Direction+0x2e>
		{
			CLR_BIT(DDRA,pin);
  98:	2a b3       	in	r18, 0x1a	; 26
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	02 c0       	rjmp	.+4      	; 0xa4 <SET_Direction+0x22>
  a0:	88 0f       	add	r24, r24
  a2:	99 1f       	adc	r25, r25
  a4:	6a 95       	dec	r22
  a6:	e2 f7       	brpl	.-8      	; 0xa0 <SET_Direction+0x1e>
  a8:	80 95       	com	r24
  aa:	82 23       	and	r24, r18
  ac:	8a bb       	out	0x1a, r24	; 26
  ae:	08 95       	ret
		}

		else if(direction == OUTPUT)
  b0:	41 30       	cpi	r20, 0x01	; 1
  b2:	09 f0       	breq	.+2      	; 0xb6 <SET_Direction+0x34>
  b4:	5c c0       	rjmp	.+184    	; 0x16e <SET_Direction+0xec>
		{
			SET_BIT(DDRA,pin);
  b6:	2a b3       	in	r18, 0x1a	; 26
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <SET_Direction+0x40>
  be:	88 0f       	add	r24, r24
  c0:	99 1f       	adc	r25, r25
  c2:	6a 95       	dec	r22
  c4:	e2 f7       	brpl	.-8      	; 0xbe <SET_Direction+0x3c>
  c6:	82 2b       	or	r24, r18
  c8:	8a bb       	out	0x1a, r24	; 26
  ca:	08 95       	ret
		}
		break;

	case PORT_B:
		if(direction == INPUT)
  cc:	41 11       	cpse	r20, r1
  ce:	0c c0       	rjmp	.+24     	; 0xe8 <SET_Direction+0x66>
		{
			CLR_BIT(DDRB,pin);
  d0:	27 b3       	in	r18, 0x17	; 23
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	02 c0       	rjmp	.+4      	; 0xdc <SET_Direction+0x5a>
  d8:	88 0f       	add	r24, r24
  da:	99 1f       	adc	r25, r25
  dc:	6a 95       	dec	r22
  de:	e2 f7       	brpl	.-8      	; 0xd8 <SET_Direction+0x56>
  e0:	80 95       	com	r24
  e2:	82 23       	and	r24, r18
  e4:	87 bb       	out	0x17, r24	; 23
  e6:	08 95       	ret
		}

		else if(direction == OUTPUT)
  e8:	41 30       	cpi	r20, 0x01	; 1
  ea:	09 f0       	breq	.+2      	; 0xee <SET_Direction+0x6c>
  ec:	40 c0       	rjmp	.+128    	; 0x16e <SET_Direction+0xec>
		{
			SET_BIT(DDRB,pin);
  ee:	27 b3       	in	r18, 0x17	; 23
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	02 c0       	rjmp	.+4      	; 0xfa <SET_Direction+0x78>
  f6:	88 0f       	add	r24, r24
  f8:	99 1f       	adc	r25, r25
  fa:	6a 95       	dec	r22
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <SET_Direction+0x74>
  fe:	82 2b       	or	r24, r18
 100:	87 bb       	out	0x17, r24	; 23
 102:	08 95       	ret
		}
		break;

	case PORT_C:
		if(direction == INPUT)
 104:	41 11       	cpse	r20, r1
 106:	0c c0       	rjmp	.+24     	; 0x120 <SET_Direction+0x9e>
		{
			CLR_BIT(DDRC,pin);
 108:	24 b3       	in	r18, 0x14	; 20
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	02 c0       	rjmp	.+4      	; 0x114 <SET_Direction+0x92>
 110:	88 0f       	add	r24, r24
 112:	99 1f       	adc	r25, r25
 114:	6a 95       	dec	r22
 116:	e2 f7       	brpl	.-8      	; 0x110 <SET_Direction+0x8e>
 118:	80 95       	com	r24
 11a:	82 23       	and	r24, r18
 11c:	84 bb       	out	0x14, r24	; 20
 11e:	08 95       	ret
		}

		else if(direction == OUTPUT)
 120:	41 30       	cpi	r20, 0x01	; 1
 122:	29 f5       	brne	.+74     	; 0x16e <SET_Direction+0xec>
		{
			SET_BIT(DDRC,pin);
 124:	24 b3       	in	r18, 0x14	; 20
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	02 c0       	rjmp	.+4      	; 0x130 <SET_Direction+0xae>
 12c:	88 0f       	add	r24, r24
 12e:	99 1f       	adc	r25, r25
 130:	6a 95       	dec	r22
 132:	e2 f7       	brpl	.-8      	; 0x12c <SET_Direction+0xaa>
 134:	82 2b       	or	r24, r18
 136:	84 bb       	out	0x14, r24	; 20
 138:	08 95       	ret
		}
		break;

	case PORT_D:
		if(direction == INPUT)
 13a:	41 11       	cpse	r20, r1
 13c:	0c c0       	rjmp	.+24     	; 0x156 <SET_Direction+0xd4>
		{
			CLR_BIT(DDRD,pin);
 13e:	21 b3       	in	r18, 0x11	; 17
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	02 c0       	rjmp	.+4      	; 0x14a <SET_Direction+0xc8>
 146:	88 0f       	add	r24, r24
 148:	99 1f       	adc	r25, r25
 14a:	6a 95       	dec	r22
 14c:	e2 f7       	brpl	.-8      	; 0x146 <SET_Direction+0xc4>
 14e:	80 95       	com	r24
 150:	82 23       	and	r24, r18
 152:	81 bb       	out	0x11, r24	; 17
 154:	08 95       	ret
		}

		else if(direction == OUTPUT)
 156:	41 30       	cpi	r20, 0x01	; 1
 158:	51 f4       	brne	.+20     	; 0x16e <SET_Direction+0xec>
		{
			SET_BIT(DDRD,pin);
 15a:	21 b3       	in	r18, 0x11	; 17
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	02 c0       	rjmp	.+4      	; 0x166 <SET_Direction+0xe4>
 162:	88 0f       	add	r24, r24
 164:	99 1f       	adc	r25, r25
 166:	6a 95       	dec	r22
 168:	e2 f7       	brpl	.-8      	; 0x162 <SET_Direction+0xe0>
 16a:	82 2b       	or	r24, r18
 16c:	81 bb       	out	0x11, r24	; 17
 16e:	08 95       	ret

00000170 <SET_Value>:


/*   Function to set the value of the pin    */
void SET_Value(u8 port, u8 pin, u8 value)
{
	switch(port)
 170:	81 30       	cpi	r24, 0x01	; 1
 172:	19 f1       	breq	.+70     	; 0x1ba <SET_Value+0x4a>
 174:	30 f0       	brcs	.+12     	; 0x182 <SET_Value+0x12>
 176:	82 30       	cpi	r24, 0x02	; 2
 178:	e1 f1       	breq	.+120    	; 0x1f2 <SET_Value+0x82>
 17a:	83 30       	cpi	r24, 0x03	; 3
 17c:	09 f4       	brne	.+2      	; 0x180 <SET_Value+0x10>
 17e:	54 c0       	rjmp	.+168    	; 0x228 <SET_Value+0xb8>
 180:	08 95       	ret
	{
	case PORT_A:
		if(value == LOW)
 182:	41 11       	cpse	r20, r1
 184:	0c c0       	rjmp	.+24     	; 0x19e <SET_Value+0x2e>
		{
			CLR_BIT(PORTA,pin);
 186:	2b b3       	in	r18, 0x1b	; 27
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	02 c0       	rjmp	.+4      	; 0x192 <SET_Value+0x22>
 18e:	88 0f       	add	r24, r24
 190:	99 1f       	adc	r25, r25
 192:	6a 95       	dec	r22
 194:	e2 f7       	brpl	.-8      	; 0x18e <SET_Value+0x1e>
 196:	80 95       	com	r24
 198:	82 23       	and	r24, r18
 19a:	8b bb       	out	0x1b, r24	; 27
 19c:	08 95       	ret
		}

		else if(value  == HIGH)
 19e:	41 30       	cpi	r20, 0x01	; 1
 1a0:	09 f0       	breq	.+2      	; 0x1a4 <SET_Value+0x34>
 1a2:	5c c0       	rjmp	.+184    	; 0x25c <SET_Value+0xec>
		{
			SET_BIT(PORTA,pin);
 1a4:	2b b3       	in	r18, 0x1b	; 27
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <SET_Value+0x40>
 1ac:	88 0f       	add	r24, r24
 1ae:	99 1f       	adc	r25, r25
 1b0:	6a 95       	dec	r22
 1b2:	e2 f7       	brpl	.-8      	; 0x1ac <SET_Value+0x3c>
 1b4:	82 2b       	or	r24, r18
 1b6:	8b bb       	out	0x1b, r24	; 27
 1b8:	08 95       	ret
		}
		break;

	case PORT_B:
		if(value == LOW)
 1ba:	41 11       	cpse	r20, r1
 1bc:	0c c0       	rjmp	.+24     	; 0x1d6 <SET_Value+0x66>
		{
			CLR_BIT(PORTB,pin);
 1be:	28 b3       	in	r18, 0x18	; 24
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	02 c0       	rjmp	.+4      	; 0x1ca <SET_Value+0x5a>
 1c6:	88 0f       	add	r24, r24
 1c8:	99 1f       	adc	r25, r25
 1ca:	6a 95       	dec	r22
 1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <SET_Value+0x56>
 1ce:	80 95       	com	r24
 1d0:	82 23       	and	r24, r18
 1d2:	88 bb       	out	0x18, r24	; 24
 1d4:	08 95       	ret
		}

		else if(value == HIGH)
 1d6:	41 30       	cpi	r20, 0x01	; 1
 1d8:	09 f0       	breq	.+2      	; 0x1dc <SET_Value+0x6c>
 1da:	40 c0       	rjmp	.+128    	; 0x25c <SET_Value+0xec>
		{
			SET_BIT(PORTB,pin);
 1dc:	28 b3       	in	r18, 0x18	; 24
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <SET_Value+0x78>
 1e4:	88 0f       	add	r24, r24
 1e6:	99 1f       	adc	r25, r25
 1e8:	6a 95       	dec	r22
 1ea:	e2 f7       	brpl	.-8      	; 0x1e4 <SET_Value+0x74>
 1ec:	82 2b       	or	r24, r18
 1ee:	88 bb       	out	0x18, r24	; 24
 1f0:	08 95       	ret
		}
		break;

	case PORT_C:
		if(value == LOW)
 1f2:	41 11       	cpse	r20, r1
 1f4:	0c c0       	rjmp	.+24     	; 0x20e <SET_Value+0x9e>
		{
			CLR_BIT(PORTC,pin);
 1f6:	25 b3       	in	r18, 0x15	; 21
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <SET_Value+0x92>
 1fe:	88 0f       	add	r24, r24
 200:	99 1f       	adc	r25, r25
 202:	6a 95       	dec	r22
 204:	e2 f7       	brpl	.-8      	; 0x1fe <SET_Value+0x8e>
 206:	80 95       	com	r24
 208:	82 23       	and	r24, r18
 20a:	85 bb       	out	0x15, r24	; 21
 20c:	08 95       	ret
		}

		else if(value == HIGH)
 20e:	41 30       	cpi	r20, 0x01	; 1
 210:	29 f5       	brne	.+74     	; 0x25c <SET_Value+0xec>
		{
			SET_BIT(PORTC,pin);
 212:	25 b3       	in	r18, 0x15	; 21
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	02 c0       	rjmp	.+4      	; 0x21e <SET_Value+0xae>
 21a:	88 0f       	add	r24, r24
 21c:	99 1f       	adc	r25, r25
 21e:	6a 95       	dec	r22
 220:	e2 f7       	brpl	.-8      	; 0x21a <SET_Value+0xaa>
 222:	82 2b       	or	r24, r18
 224:	85 bb       	out	0x15, r24	; 21
 226:	08 95       	ret
		}
		break;

	case PORT_D:
		if(value == LOW)
 228:	41 11       	cpse	r20, r1
 22a:	0c c0       	rjmp	.+24     	; 0x244 <SET_Value+0xd4>
		{
			CLR_BIT(PORTD,pin);
 22c:	22 b3       	in	r18, 0x12	; 18
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	02 c0       	rjmp	.+4      	; 0x238 <SET_Value+0xc8>
 234:	88 0f       	add	r24, r24
 236:	99 1f       	adc	r25, r25
 238:	6a 95       	dec	r22
 23a:	e2 f7       	brpl	.-8      	; 0x234 <SET_Value+0xc4>
 23c:	80 95       	com	r24
 23e:	82 23       	and	r24, r18
 240:	82 bb       	out	0x12, r24	; 18
 242:	08 95       	ret
		}

		else if(value == HIGH)
 244:	41 30       	cpi	r20, 0x01	; 1
 246:	51 f4       	brne	.+20     	; 0x25c <SET_Value+0xec>
		{
			SET_BIT(PORTD,pin);
 248:	22 b3       	in	r18, 0x12	; 18
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	02 c0       	rjmp	.+4      	; 0x254 <SET_Value+0xe4>
 250:	88 0f       	add	r24, r24
 252:	99 1f       	adc	r25, r25
 254:	6a 95       	dec	r22
 256:	e2 f7       	brpl	.-8      	; 0x250 <SET_Value+0xe0>
 258:	82 2b       	or	r24, r18
 25a:	82 bb       	out	0x12, r24	; 18
 25c:	08 95       	ret

0000025e <GET_Value>:


/*   Function to get the value of the pin    */
u8 GET_Value(u8 port, u8 pin)
{
	switch(port)
 25e:	81 30       	cpi	r24, 0x01	; 1
 260:	79 f0       	breq	.+30     	; 0x280 <GET_Value+0x22>
 262:	28 f0       	brcs	.+10     	; 0x26e <GET_Value+0x10>
 264:	82 30       	cpi	r24, 0x02	; 2
 266:	a9 f0       	breq	.+42     	; 0x292 <GET_Value+0x34>
 268:	83 30       	cpi	r24, 0x03	; 3
 26a:	e1 f0       	breq	.+56     	; 0x2a4 <GET_Value+0x46>
 26c:	24 c0       	rjmp	.+72     	; 0x2b6 <GET_Value+0x58>
	{
	case PORT_A:
		return GET_BIT(PINA,pin);
 26e:	89 b3       	in	r24, 0x19	; 25
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	02 c0       	rjmp	.+4      	; 0x278 <GET_Value+0x1a>
 274:	95 95       	asr	r25
 276:	87 95       	ror	r24
 278:	6a 95       	dec	r22
 27a:	e2 f7       	brpl	.-8      	; 0x274 <GET_Value+0x16>
 27c:	81 70       	andi	r24, 0x01	; 1
 27e:	08 95       	ret
	    break;
	case PORT_B:
		return GET_BIT(PINB,pin);
 280:	86 b3       	in	r24, 0x16	; 22
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	02 c0       	rjmp	.+4      	; 0x28a <GET_Value+0x2c>
 286:	95 95       	asr	r25
 288:	87 95       	ror	r24
 28a:	6a 95       	dec	r22
 28c:	e2 f7       	brpl	.-8      	; 0x286 <GET_Value+0x28>
 28e:	81 70       	andi	r24, 0x01	; 1
 290:	08 95       	ret
	    break;
	case PORT_C:
		return GET_BIT(PINC,pin);
 292:	83 b3       	in	r24, 0x13	; 19
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	02 c0       	rjmp	.+4      	; 0x29c <GET_Value+0x3e>
 298:	95 95       	asr	r25
 29a:	87 95       	ror	r24
 29c:	6a 95       	dec	r22
 29e:	e2 f7       	brpl	.-8      	; 0x298 <GET_Value+0x3a>
 2a0:	81 70       	andi	r24, 0x01	; 1
 2a2:	08 95       	ret
	    break;
	case PORT_D:
		return GET_BIT(PIND,pin);
 2a4:	80 b3       	in	r24, 0x10	; 16
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	02 c0       	rjmp	.+4      	; 0x2ae <GET_Value+0x50>
 2aa:	95 95       	asr	r25
 2ac:	87 95       	ror	r24
 2ae:	6a 95       	dec	r22
 2b0:	e2 f7       	brpl	.-8      	; 0x2aa <GET_Value+0x4c>
 2b2:	81 70       	andi	r24, 0x01	; 1
 2b4:	08 95       	ret
	    break;
	}
	return 0;
 2b6:	80 e0       	ldi	r24, 0x00	; 0
}
 2b8:	08 95       	ret

000002ba <SET_Direction_4LSB>:


/*   Function to set the direction of the 4LSB pins   */
void SET_Direction_4LSB(u8 port, u8 direction)
{
	switch(port)
 2ba:	81 30       	cpi	r24, 0x01	; 1
 2bc:	91 f0       	breq	.+36     	; 0x2e2 <SET_Direction_4LSB+0x28>
 2be:	28 f0       	brcs	.+10     	; 0x2ca <SET_Direction_4LSB+0x10>
 2c0:	82 30       	cpi	r24, 0x02	; 2
 2c2:	d9 f0       	breq	.+54     	; 0x2fa <SET_Direction_4LSB+0x40>
 2c4:	83 30       	cpi	r24, 0x03	; 3
 2c6:	29 f1       	breq	.+74     	; 0x312 <SET_Direction_4LSB+0x58>
 2c8:	08 95       	ret
	{
	case PORT_A:
		if(direction == INPUT)
 2ca:	61 11       	cpse	r22, r1
 2cc:	04 c0       	rjmp	.+8      	; 0x2d6 <SET_Direction_4LSB+0x1c>
		{
			DDRA&=0xF0; //set 4 LSB to zero
 2ce:	8a b3       	in	r24, 0x1a	; 26
 2d0:	80 7f       	andi	r24, 0xF0	; 240
 2d2:	8a bb       	out	0x1a, r24	; 26
 2d4:	08 95       	ret
		}

		else if(direction == OUTPUT)
 2d6:	61 30       	cpi	r22, 0x01	; 1
 2d8:	39 f5       	brne	.+78     	; 0x328 <SET_Direction_4LSB+0x6e>
		{
			DDRA|=0x0F;  //set 4 LSB to one's
 2da:	8a b3       	in	r24, 0x1a	; 26
 2dc:	8f 60       	ori	r24, 0x0F	; 15
 2de:	8a bb       	out	0x1a, r24	; 26
 2e0:	08 95       	ret
		}
		break;

	case PORT_B:
		if(direction == INPUT)
 2e2:	61 11       	cpse	r22, r1
 2e4:	04 c0       	rjmp	.+8      	; 0x2ee <SET_Direction_4LSB+0x34>
		{
			DDRB&=0xF0; //set 4 LSB to zero
 2e6:	87 b3       	in	r24, 0x17	; 23
 2e8:	80 7f       	andi	r24, 0xF0	; 240
 2ea:	87 bb       	out	0x17, r24	; 23
 2ec:	08 95       	ret
		}

		else if(direction == OUTPUT)
 2ee:	61 30       	cpi	r22, 0x01	; 1
 2f0:	d9 f4       	brne	.+54     	; 0x328 <SET_Direction_4LSB+0x6e>
		{
			DDRB|=0x0F;  //set 4 LSB to one's
 2f2:	87 b3       	in	r24, 0x17	; 23
 2f4:	8f 60       	ori	r24, 0x0F	; 15
 2f6:	87 bb       	out	0x17, r24	; 23
 2f8:	08 95       	ret
		}
		break;

	case PORT_C:
		if(direction == INPUT)
 2fa:	61 11       	cpse	r22, r1
 2fc:	04 c0       	rjmp	.+8      	; 0x306 <SET_Direction_4LSB+0x4c>
		{
			DDRC&=0xF0; //set 4 LSB to zero
 2fe:	84 b3       	in	r24, 0x14	; 20
 300:	80 7f       	andi	r24, 0xF0	; 240
 302:	84 bb       	out	0x14, r24	; 20
 304:	08 95       	ret
		}

		else if(direction == OUTPUT)
 306:	61 30       	cpi	r22, 0x01	; 1
 308:	79 f4       	brne	.+30     	; 0x328 <SET_Direction_4LSB+0x6e>
		{
			DDRC|=0x0F;  //set 4 LSB to one's
 30a:	84 b3       	in	r24, 0x14	; 20
 30c:	8f 60       	ori	r24, 0x0F	; 15
 30e:	84 bb       	out	0x14, r24	; 20
 310:	08 95       	ret
		}
		break;

	case PORT_D:
		if(direction == INPUT)
 312:	61 11       	cpse	r22, r1
 314:	04 c0       	rjmp	.+8      	; 0x31e <SET_Direction_4LSB+0x64>
		{
			DDRD&=0xF0; //set 4 LSB to zero
 316:	81 b3       	in	r24, 0x11	; 17
 318:	80 7f       	andi	r24, 0xF0	; 240
 31a:	81 bb       	out	0x11, r24	; 17
 31c:	08 95       	ret
		}

		else if(direction == OUTPUT)
 31e:	61 30       	cpi	r22, 0x01	; 1
 320:	19 f4       	brne	.+6      	; 0x328 <SET_Direction_4LSB+0x6e>
		{
			DDRD|=0x0F;  //set 4 LSB to one's
 322:	81 b3       	in	r24, 0x11	; 17
 324:	8f 60       	ori	r24, 0x0F	; 15
 326:	81 bb       	out	0x11, r24	; 17
 328:	08 95       	ret

0000032a <SET_Direction_4MSB>:
}

/*   Function to set the direction of the 4MSB pins   */
void SET_Direction_4MSB(u8 port, u8 direction)
{
	switch(port)
 32a:	81 30       	cpi	r24, 0x01	; 1
 32c:	91 f0       	breq	.+36     	; 0x352 <SET_Direction_4MSB+0x28>
 32e:	28 f0       	brcs	.+10     	; 0x33a <SET_Direction_4MSB+0x10>
 330:	82 30       	cpi	r24, 0x02	; 2
 332:	d9 f0       	breq	.+54     	; 0x36a <SET_Direction_4MSB+0x40>
 334:	83 30       	cpi	r24, 0x03	; 3
 336:	29 f1       	breq	.+74     	; 0x382 <SET_Direction_4MSB+0x58>
 338:	08 95       	ret
	{
	case PORT_A:
		if(direction == INPUT)
 33a:	61 11       	cpse	r22, r1
 33c:	04 c0       	rjmp	.+8      	; 0x346 <SET_Direction_4MSB+0x1c>
		{
			DDRA&=0x0F; //set 4 LSB to zero
 33e:	8a b3       	in	r24, 0x1a	; 26
 340:	8f 70       	andi	r24, 0x0F	; 15
 342:	8a bb       	out	0x1a, r24	; 26
 344:	08 95       	ret
		}

		else if(direction == OUTPUT)
 346:	61 30       	cpi	r22, 0x01	; 1
 348:	39 f5       	brne	.+78     	; 0x398 <SET_Direction_4MSB+0x6e>
		{
			DDRA|=0xF0;  //set 4 LSB to one's
 34a:	8a b3       	in	r24, 0x1a	; 26
 34c:	80 6f       	ori	r24, 0xF0	; 240
 34e:	8a bb       	out	0x1a, r24	; 26
 350:	08 95       	ret
		}
		break;

	case PORT_B:
		if(direction == INPUT)
 352:	61 11       	cpse	r22, r1
 354:	04 c0       	rjmp	.+8      	; 0x35e <SET_Direction_4MSB+0x34>
		{
			DDRB&=0x0F; //set 4 LSB to zero
 356:	87 b3       	in	r24, 0x17	; 23
 358:	8f 70       	andi	r24, 0x0F	; 15
 35a:	87 bb       	out	0x17, r24	; 23
 35c:	08 95       	ret
		}

		else if(direction == OUTPUT)
 35e:	61 30       	cpi	r22, 0x01	; 1
 360:	d9 f4       	brne	.+54     	; 0x398 <SET_Direction_4MSB+0x6e>
		{
			DDRB|=0xF0;  //set 4 LSB to one's
 362:	87 b3       	in	r24, 0x17	; 23
 364:	80 6f       	ori	r24, 0xF0	; 240
 366:	87 bb       	out	0x17, r24	; 23
 368:	08 95       	ret
		}
		break;

	case PORT_C:
		if(direction == INPUT)
 36a:	61 11       	cpse	r22, r1
 36c:	04 c0       	rjmp	.+8      	; 0x376 <SET_Direction_4MSB+0x4c>
		{
			DDRC&=0x0F; //set 4 LSB to zero
 36e:	84 b3       	in	r24, 0x14	; 20
 370:	8f 70       	andi	r24, 0x0F	; 15
 372:	84 bb       	out	0x14, r24	; 20
 374:	08 95       	ret
		}

		else if(direction == OUTPUT)
 376:	61 30       	cpi	r22, 0x01	; 1
 378:	79 f4       	brne	.+30     	; 0x398 <SET_Direction_4MSB+0x6e>
		{
			DDRC|=0xF0;  //set 4 LSB to one's
 37a:	84 b3       	in	r24, 0x14	; 20
 37c:	80 6f       	ori	r24, 0xF0	; 240
 37e:	84 bb       	out	0x14, r24	; 20
 380:	08 95       	ret
		}
		break;

	case PORT_D:
		if(direction == INPUT)
 382:	61 11       	cpse	r22, r1
 384:	04 c0       	rjmp	.+8      	; 0x38e <SET_Direction_4MSB+0x64>
		{
			DDRD &= 0x0F; //set 4 LSB to zero
 386:	81 b3       	in	r24, 0x11	; 17
 388:	8f 70       	andi	r24, 0x0F	; 15
 38a:	81 bb       	out	0x11, r24	; 17
 38c:	08 95       	ret
		}

		else if(direction == OUTPUT)
 38e:	61 30       	cpi	r22, 0x01	; 1
 390:	19 f4       	brne	.+6      	; 0x398 <SET_Direction_4MSB+0x6e>
		{
			DDRD|=0xF0;  //set 4 LSB to one's
 392:	81 b3       	in	r24, 0x11	; 17
 394:	80 6f       	ori	r24, 0xF0	; 240
 396:	81 bb       	out	0x11, r24	; 17
 398:	08 95       	ret

0000039a <SET_Value_4LSB>:


/*   Function to set the value of the 4LSB pins    */
void SET_Value_4LSB(u8 port, u8 value)
{
	switch(port)
 39a:	81 30       	cpi	r24, 0x01	; 1
 39c:	69 f0       	breq	.+26     	; 0x3b8 <SET_Value_4LSB+0x1e>
 39e:	28 f0       	brcs	.+10     	; 0x3aa <SET_Value_4LSB+0x10>
 3a0:	82 30       	cpi	r24, 0x02	; 2
 3a2:	89 f0       	breq	.+34     	; 0x3c6 <SET_Value_4LSB+0x2c>
 3a4:	83 30       	cpi	r24, 0x03	; 3
 3a6:	b1 f0       	breq	.+44     	; 0x3d4 <SET_Value_4LSB+0x3a>
 3a8:	08 95       	ret
	{
	case PORT_A:
			PORTA &= 0xF0;
 3aa:	8b b3       	in	r24, 0x1b	; 27
 3ac:	80 7f       	andi	r24, 0xF0	; 240
 3ae:	8b bb       	out	0x1b, r24	; 27
			PORTA |= value;
 3b0:	8b b3       	in	r24, 0x1b	; 27
 3b2:	68 2b       	or	r22, r24
 3b4:	6b bb       	out	0x1b, r22	; 27
		break;
 3b6:	08 95       	ret

	case PORT_B:
			PORTB &= 0xF0;
 3b8:	88 b3       	in	r24, 0x18	; 24
 3ba:	80 7f       	andi	r24, 0xF0	; 240
 3bc:	88 bb       	out	0x18, r24	; 24
			PORTB |= value;
 3be:	88 b3       	in	r24, 0x18	; 24
 3c0:	68 2b       	or	r22, r24
 3c2:	68 bb       	out	0x18, r22	; 24
			break;
 3c4:	08 95       	ret
			
	case PORT_C:
			PORTC &= 0xF0;
 3c6:	85 b3       	in	r24, 0x15	; 21
 3c8:	80 7f       	andi	r24, 0xF0	; 240
 3ca:	85 bb       	out	0x15, r24	; 21
			PORTC |= value;
 3cc:	85 b3       	in	r24, 0x15	; 21
 3ce:	68 2b       	or	r22, r24
 3d0:	65 bb       	out	0x15, r22	; 21
			break;
 3d2:	08 95       	ret

	case PORT_D:
			PORTD &= 0xF0;
 3d4:	82 b3       	in	r24, 0x12	; 18
 3d6:	80 7f       	andi	r24, 0xF0	; 240
 3d8:	82 bb       	out	0x12, r24	; 18
			PORTD |= value;
 3da:	82 b3       	in	r24, 0x12	; 18
 3dc:	68 2b       	or	r22, r24
 3de:	62 bb       	out	0x12, r22	; 18
 3e0:	08 95       	ret

000003e2 <SET_Value_4MSB>:
}

/*   Function to set the value of the 4MSB pins    */
void SET_Value_4MSB(u8 port, u8 value)
{
	switch(port)
 3e2:	81 30       	cpi	r24, 0x01	; 1
 3e4:	89 f0       	breq	.+34     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 3e6:	28 f0       	brcs	.+10     	; 0x3f2 <SET_Value_4MSB+0x10>
 3e8:	82 30       	cpi	r24, 0x02	; 2
 3ea:	c9 f0       	breq	.+50     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 3ec:	83 30       	cpi	r24, 0x03	; 3
 3ee:	11 f1       	breq	.+68     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 3f0:	08 95       	ret
	{
		case PORT_A:
		PORTA &= 0x0F;
 3f2:	8b b3       	in	r24, 0x1b	; 27
 3f4:	8f 70       	andi	r24, 0x0F	; 15
 3f6:	8b bb       	out	0x1b, r24	; 27
		PORTA |= value<<4;
 3f8:	8b b3       	in	r24, 0x1b	; 27
 3fa:	90 e1       	ldi	r25, 0x10	; 16
 3fc:	69 9f       	mul	r22, r25
 3fe:	b0 01       	movw	r22, r0
 400:	11 24       	eor	r1, r1
 402:	68 2b       	or	r22, r24
 404:	6b bb       	out	0x1b, r22	; 27
		break;
 406:	08 95       	ret

		case PORT_B:
		PORTB &= 0x0F;
 408:	88 b3       	in	r24, 0x18	; 24
 40a:	8f 70       	andi	r24, 0x0F	; 15
 40c:	88 bb       	out	0x18, r24	; 24
		PORTB |= value<<4;
 40e:	88 b3       	in	r24, 0x18	; 24
 410:	90 e1       	ldi	r25, 0x10	; 16
 412:	69 9f       	mul	r22, r25
 414:	b0 01       	movw	r22, r0
 416:	11 24       	eor	r1, r1
 418:	68 2b       	or	r22, r24
 41a:	68 bb       	out	0x18, r22	; 24
		break;
 41c:	08 95       	ret
		
		case PORT_C:
		PORTC &= 0x0F;
 41e:	85 b3       	in	r24, 0x15	; 21
 420:	8f 70       	andi	r24, 0x0F	; 15
 422:	85 bb       	out	0x15, r24	; 21
		PORTC |= value<<4;
 424:	85 b3       	in	r24, 0x15	; 21
 426:	90 e1       	ldi	r25, 0x10	; 16
 428:	69 9f       	mul	r22, r25
 42a:	b0 01       	movw	r22, r0
 42c:	11 24       	eor	r1, r1
 42e:	68 2b       	or	r22, r24
 430:	65 bb       	out	0x15, r22	; 21
		break;
 432:	08 95       	ret

		case PORT_D:
		PORTD &= 0x0F;
 434:	82 b3       	in	r24, 0x12	; 18
 436:	8f 70       	andi	r24, 0x0F	; 15
 438:	82 bb       	out	0x12, r24	; 18
		PORTD |= value<<4;
 43a:	82 b3       	in	r24, 0x12	; 18
 43c:	90 e1       	ldi	r25, 0x10	; 16
 43e:	69 9f       	mul	r22, r25
 440:	b0 01       	movw	r22, r0
 442:	11 24       	eor	r1, r1
 444:	68 2b       	or	r22, r24
 446:	62 bb       	out	0x12, r22	; 18
 448:	08 95       	ret

0000044a <Keypad_Getkey>:
#define F_CPU 8000000UL //1MHz Clock frequency
#include <util/delay.h>  // For delay function


u8 Keypad_Getkey()
{   u8 Key='u';
 44a:	0f 93       	push	r16
 44c:	1f 93       	push	r17
 44e:	cf 93       	push	r28
 450:	df 93       	push	r29
 452:	cd b7       	in	r28, 0x3d	; 61
 454:	de b7       	in	r29, 0x3e	; 62
 456:	60 97       	sbiw	r28, 0x10	; 16
 458:	0f b6       	in	r0, 0x3f	; 63
 45a:	f8 94       	cli
 45c:	de bf       	out	0x3e, r29	; 62
 45e:	0f be       	out	0x3f, r0	; 63
 460:	cd bf       	out	0x3d, r28	; 61
	u8 arr[4][4] = {{'7','8','9','/'},{'4','5','6','x'},{'1','2','3','-'},{'C','0','=','+'}};
 462:	80 e1       	ldi	r24, 0x10	; 16
 464:	e0 e6       	ldi	r30, 0x60	; 96
 466:	f0 e0       	ldi	r31, 0x00	; 0
 468:	de 01       	movw	r26, r28
 46a:	11 96       	adiw	r26, 0x01	; 1
 46c:	01 90       	ld	r0, Z+
 46e:	0d 92       	st	X+, r0
 470:	8a 95       	dec	r24
 472:	e1 f7       	brne	.-8      	; 0x46c <Keypad_Getkey+0x22>
	for(u8 i=0;i<4;i++ )
 474:	00 e0       	ldi	r16, 0x00	; 0
	{
		SET_Value(PORT_A,i,LOW);
 476:	40 e0       	ldi	r20, 0x00	; 0
 478:	60 2f       	mov	r22, r16
 47a:	80 e0       	ldi	r24, 0x00	; 0
 47c:	0e 94 b8 00 	call	0x170	; 0x170 <SET_Value>
		for(u8 j=0;j<4;j++)
 480:	10 e0       	ldi	r17, 0x00	; 0
		{
			if(GET_Value(PORT_B,j)==LOW)
 482:	61 2f       	mov	r22, r17
 484:	81 e0       	ldi	r24, 0x01	; 1
 486:	0e 94 2f 01 	call	0x25e	; 0x25e <GET_Value>
 48a:	81 11       	cpse	r24, r1
 48c:	1a c0       	rjmp	.+52     	; 0x4c2 <Keypad_Getkey+0x78>
 48e:	06 c0       	rjmp	.+12     	; 0x49c <Keypad_Getkey+0x52>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 490:	8f e4       	ldi	r24, 0x4F	; 79
 492:	93 ec       	ldi	r25, 0xC3	; 195
 494:	01 97       	sbiw	r24, 0x01	; 1
 496:	f1 f7       	brne	.-4      	; 0x494 <Keypad_Getkey+0x4a>
 498:	00 c0       	rjmp	.+0      	; 0x49a <Keypad_Getkey+0x50>
 49a:	00 00       	nop
			{
				while(GET_Value(PORT_B,j)==LOW) //For denouncing Problem
 49c:	61 2f       	mov	r22, r17
 49e:	81 e0       	ldi	r24, 0x01	; 1
 4a0:	0e 94 2f 01 	call	0x25e	; 0x25e <GET_Value>
 4a4:	88 23       	and	r24, r24
 4a6:	a1 f3       	breq	.-24     	; 0x490 <Keypad_Getkey+0x46>
				{
					_delay_ms(25);
				}
				Key=arr[j][i];
 4a8:	e1 e0       	ldi	r30, 0x01	; 1
 4aa:	f0 e0       	ldi	r31, 0x00	; 0
 4ac:	ec 0f       	add	r30, r28
 4ae:	fd 1f       	adc	r31, r29
 4b0:	94 e0       	ldi	r25, 0x04	; 4
 4b2:	19 9f       	mul	r17, r25
 4b4:	e0 0d       	add	r30, r0
 4b6:	f1 1d       	adc	r31, r1
 4b8:	11 24       	eor	r1, r1
 4ba:	e0 0f       	add	r30, r16
 4bc:	f1 1d       	adc	r31, r1
 4be:	80 81       	ld	r24, Z
				return Key;
 4c0:	0c c0       	rjmp	.+24     	; 0x4da <Keypad_Getkey+0x90>
{   u8 Key='u';
	u8 arr[4][4] = {{'7','8','9','/'},{'4','5','6','x'},{'1','2','3','-'},{'C','0','=','+'}};
	for(u8 i=0;i<4;i++ )
	{
		SET_Value(PORT_A,i,LOW);
		for(u8 j=0;j<4;j++)
 4c2:	1f 5f       	subi	r17, 0xFF	; 255
 4c4:	14 30       	cpi	r17, 0x04	; 4
 4c6:	e9 f6       	brne	.-70     	; 0x482 <Keypad_Getkey+0x38>
				}
				Key=arr[j][i];
				return Key;
			}
		}
		SET_Value(PORT_A,i,HIGH);
 4c8:	41 e0       	ldi	r20, 0x01	; 1
 4ca:	60 2f       	mov	r22, r16
 4cc:	80 e0       	ldi	r24, 0x00	; 0
 4ce:	0e 94 b8 00 	call	0x170	; 0x170 <SET_Value>


u8 Keypad_Getkey()
{   u8 Key='u';
	u8 arr[4][4] = {{'7','8','9','/'},{'4','5','6','x'},{'1','2','3','-'},{'C','0','=','+'}};
	for(u8 i=0;i<4;i++ )
 4d2:	0f 5f       	subi	r16, 0xFF	; 255
 4d4:	04 30       	cpi	r16, 0x04	; 4
 4d6:	79 f6       	brne	.-98     	; 0x476 <Keypad_Getkey+0x2c>
				return Key;
			}
		}
		SET_Value(PORT_A,i,HIGH);
	}
	return Key;
 4d8:	85 e7       	ldi	r24, 0x75	; 117
}
 4da:	60 96       	adiw	r28, 0x10	; 16
 4dc:	0f b6       	in	r0, 0x3f	; 63
 4de:	f8 94       	cli
 4e0:	de bf       	out	0x3e, r29	; 62
 4e2:	0f be       	out	0x3f, r0	; 63
 4e4:	cd bf       	out	0x3d, r28	; 61
 4e6:	df 91       	pop	r29
 4e8:	cf 91       	pop	r28
 4ea:	1f 91       	pop	r17
 4ec:	0f 91       	pop	r16
 4ee:	08 95       	ret

000004f0 <LCD_SendCommands>:
	LCD_SendCommands(Entry_Mode);     //send Entry Mode for 4LSB
}

//Send Commands Function
void LCD_SendCommands(u8 Command)
{   //RS pin connected to PORT C pin 0
 4f0:	cf 93       	push	r28
 4f2:	c8 2f       	mov	r28, r24
	SET_Value(PORT_C,PIN_0,LOW);      //Set RS pin to zero for write operation
 4f4:	40 e0       	ldi	r20, 0x00	; 0
 4f6:	60 e0       	ldi	r22, 0x00	; 0
 4f8:	82 e0       	ldi	r24, 0x02	; 2
 4fa:	0e 94 b8 00 	call	0x170	; 0x170 <SET_Value>
	
	//RW pin connected to PORT C pin 1
	SET_Value(PORT_C,PIN_1,LOW);     //Set RW pin to zero for write operation
 4fe:	40 e0       	ldi	r20, 0x00	; 0
 500:	61 e0       	ldi	r22, 0x01	; 1
 502:	82 e0       	ldi	r24, 0x02	; 2
 504:	0e 94 b8 00 	call	0x170	; 0x170 <SET_Value>
	
	//Data pins connected to the 4MSB of PORT C
	SET_Value_4MSB(PORT_C,Command); //Send command to the MSB of PORT C
 508:	6c 2f       	mov	r22, r28
 50a:	82 e0       	ldi	r24, 0x02	; 2
 50c:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <SET_Value_4MSB>
	
	//EN pin connected to PORT C pin 2
	SET_Value(PORT_C,PIN_2,HIGH); //Set EN pin to 1 
 510:	41 e0       	ldi	r20, 0x01	; 1
 512:	62 e0       	ldi	r22, 0x02	; 2
 514:	82 e0       	ldi	r24, 0x02	; 2
 516:	0e 94 b8 00 	call	0x170	; 0x170 <SET_Value>
 51a:	8f e0       	ldi	r24, 0x0F	; 15
 51c:	97 e2       	ldi	r25, 0x27	; 39
 51e:	01 97       	sbiw	r24, 0x01	; 1
 520:	f1 f7       	brne	.-4      	; 0x51e <LCD_SendCommands+0x2e>
 522:	00 c0       	rjmp	.+0      	; 0x524 <LCD_SendCommands+0x34>
 524:	00 00       	nop
	
	//Delay for 5 m sec
	_delay_ms(5);
	
	//EN pin connected to PORT C pin 2
	SET_Value(PORT_C,PIN_2,LOW); //Set EN pin to 0 
 526:	40 e0       	ldi	r20, 0x00	; 0
 528:	62 e0       	ldi	r22, 0x02	; 2
 52a:	82 e0       	ldi	r24, 0x02	; 2
 52c:	0e 94 b8 00 	call	0x170	; 0x170 <SET_Value>
 530:	8f ec       	ldi	r24, 0xCF	; 207
 532:	97 e0       	ldi	r25, 0x07	; 7
 534:	01 97       	sbiw	r24, 0x01	; 1
 536:	f1 f7       	brne	.-4      	; 0x534 <LCD_SendCommands+0x44>
 538:	00 c0       	rjmp	.+0      	; 0x53a <LCD_SendCommands+0x4a>
 53a:	00 00       	nop
	
	//Delay for 1 m sec
	_delay_ms(1);
}
 53c:	cf 91       	pop	r28
 53e:	08 95       	ret

00000540 <LCD_Init>:
#include <util/delay.h>  // For delay function

//LCD Initialization Function
void LCD_Init()
{
	LCD_SendCommands(Function_SET>>4);   //send 4MSB
 540:	82 e0       	ldi	r24, 0x02	; 2
 542:	0e 94 78 02 	call	0x4f0	; 0x4f0 <LCD_SendCommands>
	LCD_SendCommands(Function_SET>>4);  //send 4MSB again
 546:	82 e0       	ldi	r24, 0x02	; 2
 548:	0e 94 78 02 	call	0x4f0	; 0x4f0 <LCD_SendCommands>
	LCD_SendCommands(Function_SET);    //send 4LSB
 54c:	88 e2       	ldi	r24, 0x28	; 40
 54e:	0e 94 78 02 	call	0x4f0	; 0x4f0 <LCD_SendCommands>
	LCD_SendCommands(Display_ON_OFF>>4);    //send ON-OFF for 4LSB
 552:	80 e0       	ldi	r24, 0x00	; 0
 554:	0e 94 78 02 	call	0x4f0	; 0x4f0 <LCD_SendCommands>
	LCD_SendCommands(Display_ON_OFF);      //send ON-OFF for 4LSB
 558:	8f e0       	ldi	r24, 0x0F	; 15
 55a:	0e 94 78 02 	call	0x4f0	; 0x4f0 <LCD_SendCommands>
	LCD_SendCommands(Display_Clear>>4);    //send Clear for 4LSB
 55e:	80 e0       	ldi	r24, 0x00	; 0
 560:	0e 94 78 02 	call	0x4f0	; 0x4f0 <LCD_SendCommands>
	LCD_SendCommands(Display_Clear);      //send Clear for 4LSB
 564:	81 e0       	ldi	r24, 0x01	; 1
 566:	0e 94 78 02 	call	0x4f0	; 0x4f0 <LCD_SendCommands>
 56a:	8f e9       	ldi	r24, 0x9F	; 159
 56c:	9f e0       	ldi	r25, 0x0F	; 15
 56e:	01 97       	sbiw	r24, 0x01	; 1
 570:	f1 f7       	brne	.-4      	; 0x56e <LCD_Init+0x2e>
 572:	00 c0       	rjmp	.+0      	; 0x574 <LCD_Init+0x34>
 574:	00 00       	nop
	_delay_ms(2);
	LCD_SendCommands(Entry_Mode>>4);   //send Entry Mode for 4MSB
 576:	80 e0       	ldi	r24, 0x00	; 0
 578:	0e 94 78 02 	call	0x4f0	; 0x4f0 <LCD_SendCommands>
	LCD_SendCommands(Entry_Mode);     //send Entry Mode for 4LSB
 57c:	86 e0       	ldi	r24, 0x06	; 6
 57e:	0e 94 78 02 	call	0x4f0	; 0x4f0 <LCD_SendCommands>
 582:	08 95       	ret

00000584 <LCD_SendData>:
	_delay_ms(1);
}

//Send Data Function
void LCD_SendData(u8 Data)
{   //RS pin connected to PORT C pin 0
 584:	cf 93       	push	r28
 586:	c8 2f       	mov	r28, r24
	SET_Value(PORT_C,PIN_0,HIGH);      //Set RS pin to one for write operation
 588:	41 e0       	ldi	r20, 0x01	; 1
 58a:	60 e0       	ldi	r22, 0x00	; 0
 58c:	82 e0       	ldi	r24, 0x02	; 2
 58e:	0e 94 b8 00 	call	0x170	; 0x170 <SET_Value>
	
	//RW pin connected to PORT C pin 1
	SET_Value(PORT_C,PIN_1,LOW);     //Set RW pin to zero for write operation
 592:	40 e0       	ldi	r20, 0x00	; 0
 594:	61 e0       	ldi	r22, 0x01	; 1
 596:	82 e0       	ldi	r24, 0x02	; 2
 598:	0e 94 b8 00 	call	0x170	; 0x170 <SET_Value>
	
	//Data pins connected to the 4MSB of PORT C
	SET_Value_4MSB(PORT_C,Data); //Send command to the MSB of PORT C
 59c:	6c 2f       	mov	r22, r28
 59e:	82 e0       	ldi	r24, 0x02	; 2
 5a0:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <SET_Value_4MSB>
    
	//EN pin connected to PORT C pin 2
	SET_Value(PORT_C,PIN_2,HIGH); //Set EN pin to 1
 5a4:	41 e0       	ldi	r20, 0x01	; 1
 5a6:	62 e0       	ldi	r22, 0x02	; 2
 5a8:	82 e0       	ldi	r24, 0x02	; 2
 5aa:	0e 94 b8 00 	call	0x170	; 0x170 <SET_Value>
 5ae:	8f e0       	ldi	r24, 0x0F	; 15
 5b0:	97 e2       	ldi	r25, 0x27	; 39
 5b2:	01 97       	sbiw	r24, 0x01	; 1
 5b4:	f1 f7       	brne	.-4      	; 0x5b2 <LCD_SendData+0x2e>
 5b6:	00 c0       	rjmp	.+0      	; 0x5b8 <LCD_SendData+0x34>
 5b8:	00 00       	nop
	
	//Delay for 5 msec
	_delay_ms(5);
	
	//EN pin connected to PORT C pin 2
	SET_Value(PORT_C,PIN_2,LOW); //Set EN pin to 0
 5ba:	40 e0       	ldi	r20, 0x00	; 0
 5bc:	62 e0       	ldi	r22, 0x02	; 2
 5be:	82 e0       	ldi	r24, 0x02	; 2
 5c0:	0e 94 b8 00 	call	0x170	; 0x170 <SET_Value>
 5c4:	8f ec       	ldi	r24, 0xCF	; 207
 5c6:	97 e0       	ldi	r25, 0x07	; 7
 5c8:	01 97       	sbiw	r24, 0x01	; 1
 5ca:	f1 f7       	brne	.-4      	; 0x5c8 <LCD_SendData+0x44>
 5cc:	00 c0       	rjmp	.+0      	; 0x5ce <LCD_SendData+0x4a>
 5ce:	00 00       	nop
	
	//Delay for 1 m sec
	_delay_ms(1);
}
 5d0:	cf 91       	pop	r28
 5d2:	08 95       	ret

000005d4 <LCD_SendData_4BitMode>:

//Send Data with 4bits Function
void LCD_SendData_4BitMode(u8 Data)
{
 5d4:	cf 93       	push	r28
 5d6:	c8 2f       	mov	r28, r24
	LCD_SendData(Data>>4); //Send 4MSB first
 5d8:	82 95       	swap	r24
 5da:	8f 70       	andi	r24, 0x0F	; 15
 5dc:	0e 94 c2 02 	call	0x584	; 0x584 <LCD_SendData>
	LCD_SendData(Data);   //Send 4LSB second
 5e0:	8c 2f       	mov	r24, r28
 5e2:	0e 94 c2 02 	call	0x584	; 0x584 <LCD_SendData>
}
 5e6:	cf 91       	pop	r28
 5e8:	08 95       	ret

000005ea <main>:
#include"LCD_Interface.h"
#include"Keypad_Interface.h"

int main()
{
	SET_Direction_4LSB(PORT_A,OUTPUT);   //Set Columns
 5ea:	61 e0       	ldi	r22, 0x01	; 1
 5ec:	80 e0       	ldi	r24, 0x00	; 0
 5ee:	0e 94 5d 01 	call	0x2ba	; 0x2ba <SET_Direction_4LSB>
	SET_Direction_4LSB(PORT_B,INPUT);   //Set Rows
 5f2:	60 e0       	ldi	r22, 0x00	; 0
 5f4:	81 e0       	ldi	r24, 0x01	; 1
 5f6:	0e 94 5d 01 	call	0x2ba	; 0x2ba <SET_Direction_4LSB>
    SET_Value_4LSB(PORT_B,0x0F);       //Set pull up resistors
 5fa:	6f e0       	ldi	r22, 0x0F	; 15
 5fc:	81 e0       	ldi	r24, 0x01	; 1
 5fe:	0e 94 cd 01 	call	0x39a	; 0x39a <SET_Value_4LSB>
	SET_Direction_4LSB(PORT_A,0x0F);  //Set 1 to all four columns
 602:	6f e0       	ldi	r22, 0x0F	; 15
 604:	80 e0       	ldi	r24, 0x00	; 0
 606:	0e 94 5d 01 	call	0x2ba	; 0x2ba <SET_Direction_4LSB>
	
	SET_Direction(PORT_C,PIN_0,OUTPUT);
 60a:	41 e0       	ldi	r20, 0x01	; 1
 60c:	60 e0       	ldi	r22, 0x00	; 0
 60e:	82 e0       	ldi	r24, 0x02	; 2
 610:	0e 94 41 00 	call	0x82	; 0x82 <SET_Direction>
	SET_Direction(PORT_C,PIN_1,OUTPUT);
 614:	41 e0       	ldi	r20, 0x01	; 1
 616:	61 e0       	ldi	r22, 0x01	; 1
 618:	82 e0       	ldi	r24, 0x02	; 2
 61a:	0e 94 41 00 	call	0x82	; 0x82 <SET_Direction>
	SET_Direction(PORT_C,PIN_2,OUTPUT);
 61e:	41 e0       	ldi	r20, 0x01	; 1
 620:	62 e0       	ldi	r22, 0x02	; 2
 622:	82 e0       	ldi	r24, 0x02	; 2
 624:	0e 94 41 00 	call	0x82	; 0x82 <SET_Direction>
	SET_Direction_4MSB(PORT_C,OUTPUT);
 628:	61 e0       	ldi	r22, 0x01	; 1
 62a:	82 e0       	ldi	r24, 0x02	; 2
 62c:	0e 94 95 01 	call	0x32a	; 0x32a <SET_Direction_4MSB>
    LCD_Init();
 630:	0e 94 a0 02 	call	0x540	; 0x540 <LCD_Init>
	u8 key;
	
	while(1)
	{
		key=Keypad_Getkey();
 634:	0e 94 25 02 	call	0x44a	; 0x44a <Keypad_Getkey>
		if(key!='u')
 638:	85 37       	cpi	r24, 0x75	; 117
 63a:	e1 f3       	breq	.-8      	; 0x634 <main+0x4a>
		{
			LCD_SendData_4BitMode(key);
 63c:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <LCD_SendData_4BitMode>
 640:	f9 cf       	rjmp	.-14     	; 0x634 <main+0x4a>

00000642 <_exit>:
 642:	f8 94       	cli

00000644 <__stop_program>:
 644:	ff cf       	rjmp	.-2      	; 0x644 <__stop_program>
