
Servo Motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000210  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000264  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000294  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ac4  00000000  00000000  00000370  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000729  00000000  00000000  00000e34  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000659  00000000  00000000  0000155d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000ec  00000000  00000000  00001bb8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000460  00000000  00000000  00001ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000064d  00000000  00000000  00002104  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  00002751  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 ad 00 	call	0x15a	; 0x15a <main>
  64:	0c 94 06 01 	jmp	0x20c	; 0x20c <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <SET_Direction>:
#include"DIO_Interface.h"

/*   Function to set the direction of the pin    */
void SET_Direction(u8 port, u8 pin, u8 direction)
{
	switch(port)
  6c:	81 30       	cpi	r24, 0x01	; 1
  6e:	19 f1       	breq	.+70     	; 0xb6 <SET_Direction+0x4a>
  70:	30 f0       	brcs	.+12     	; 0x7e <SET_Direction+0x12>
  72:	82 30       	cpi	r24, 0x02	; 2
  74:	e1 f1       	breq	.+120    	; 0xee <SET_Direction+0x82>
  76:	83 30       	cpi	r24, 0x03	; 3
  78:	09 f4       	brne	.+2      	; 0x7c <SET_Direction+0x10>
  7a:	54 c0       	rjmp	.+168    	; 0x124 <SET_Direction+0xb8>
  7c:	08 95       	ret
	{
	case PORT_A:
		if(direction == INPUT)
  7e:	41 11       	cpse	r20, r1
  80:	0c c0       	rjmp	.+24     	; 0x9a <SET_Direction+0x2e>
		{
			CLR_BIT(DDRA,pin);
  82:	2a b3       	in	r18, 0x1a	; 26
  84:	81 e0       	ldi	r24, 0x01	; 1
  86:	90 e0       	ldi	r25, 0x00	; 0
  88:	02 c0       	rjmp	.+4      	; 0x8e <SET_Direction+0x22>
  8a:	88 0f       	add	r24, r24
  8c:	99 1f       	adc	r25, r25
  8e:	6a 95       	dec	r22
  90:	e2 f7       	brpl	.-8      	; 0x8a <SET_Direction+0x1e>
  92:	80 95       	com	r24
  94:	82 23       	and	r24, r18
  96:	8a bb       	out	0x1a, r24	; 26
  98:	08 95       	ret
		}

		else if(direction == OUTPUT)
  9a:	41 30       	cpi	r20, 0x01	; 1
  9c:	09 f0       	breq	.+2      	; 0xa0 <SET_Direction+0x34>
  9e:	5c c0       	rjmp	.+184    	; 0x158 <SET_Direction+0xec>
		{
			SET_BIT(DDRA,pin);
  a0:	2a b3       	in	r18, 0x1a	; 26
  a2:	81 e0       	ldi	r24, 0x01	; 1
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	02 c0       	rjmp	.+4      	; 0xac <SET_Direction+0x40>
  a8:	88 0f       	add	r24, r24
  aa:	99 1f       	adc	r25, r25
  ac:	6a 95       	dec	r22
  ae:	e2 f7       	brpl	.-8      	; 0xa8 <SET_Direction+0x3c>
  b0:	82 2b       	or	r24, r18
  b2:	8a bb       	out	0x1a, r24	; 26
  b4:	08 95       	ret
		}
		break;

	case PORT_B:
		if(direction == INPUT)
  b6:	41 11       	cpse	r20, r1
  b8:	0c c0       	rjmp	.+24     	; 0xd2 <SET_Direction+0x66>
		{
			CLR_BIT(DDRB,pin);
  ba:	27 b3       	in	r18, 0x17	; 23
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <SET_Direction+0x5a>
  c2:	88 0f       	add	r24, r24
  c4:	99 1f       	adc	r25, r25
  c6:	6a 95       	dec	r22
  c8:	e2 f7       	brpl	.-8      	; 0xc2 <SET_Direction+0x56>
  ca:	80 95       	com	r24
  cc:	82 23       	and	r24, r18
  ce:	87 bb       	out	0x17, r24	; 23
  d0:	08 95       	ret
		}

		else if(direction == OUTPUT)
  d2:	41 30       	cpi	r20, 0x01	; 1
  d4:	09 f0       	breq	.+2      	; 0xd8 <SET_Direction+0x6c>
  d6:	40 c0       	rjmp	.+128    	; 0x158 <SET_Direction+0xec>
		{
			SET_BIT(DDRB,pin);
  d8:	27 b3       	in	r18, 0x17	; 23
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	02 c0       	rjmp	.+4      	; 0xe4 <SET_Direction+0x78>
  e0:	88 0f       	add	r24, r24
  e2:	99 1f       	adc	r25, r25
  e4:	6a 95       	dec	r22
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <SET_Direction+0x74>
  e8:	82 2b       	or	r24, r18
  ea:	87 bb       	out	0x17, r24	; 23
  ec:	08 95       	ret
		}
		break;

	case PORT_C:
		if(direction == INPUT)
  ee:	41 11       	cpse	r20, r1
  f0:	0c c0       	rjmp	.+24     	; 0x10a <SET_Direction+0x9e>
		{
			CLR_BIT(DDRC,pin);
  f2:	24 b3       	in	r18, 0x14	; 20
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	02 c0       	rjmp	.+4      	; 0xfe <SET_Direction+0x92>
  fa:	88 0f       	add	r24, r24
  fc:	99 1f       	adc	r25, r25
  fe:	6a 95       	dec	r22
 100:	e2 f7       	brpl	.-8      	; 0xfa <SET_Direction+0x8e>
 102:	80 95       	com	r24
 104:	82 23       	and	r24, r18
 106:	84 bb       	out	0x14, r24	; 20
 108:	08 95       	ret
		}

		else if(direction == OUTPUT)
 10a:	41 30       	cpi	r20, 0x01	; 1
 10c:	29 f5       	brne	.+74     	; 0x158 <SET_Direction+0xec>
		{
			SET_BIT(DDRC,pin);
 10e:	24 b3       	in	r18, 0x14	; 20
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	02 c0       	rjmp	.+4      	; 0x11a <SET_Direction+0xae>
 116:	88 0f       	add	r24, r24
 118:	99 1f       	adc	r25, r25
 11a:	6a 95       	dec	r22
 11c:	e2 f7       	brpl	.-8      	; 0x116 <SET_Direction+0xaa>
 11e:	82 2b       	or	r24, r18
 120:	84 bb       	out	0x14, r24	; 20
 122:	08 95       	ret
		}
		break;

	case PORT_D:
		if(direction == INPUT)
 124:	41 11       	cpse	r20, r1
 126:	0c c0       	rjmp	.+24     	; 0x140 <SET_Direction+0xd4>
		{
			CLR_BIT(DDRD,pin);
 128:	21 b3       	in	r18, 0x11	; 17
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	02 c0       	rjmp	.+4      	; 0x134 <SET_Direction+0xc8>
 130:	88 0f       	add	r24, r24
 132:	99 1f       	adc	r25, r25
 134:	6a 95       	dec	r22
 136:	e2 f7       	brpl	.-8      	; 0x130 <SET_Direction+0xc4>
 138:	80 95       	com	r24
 13a:	82 23       	and	r24, r18
 13c:	81 bb       	out	0x11, r24	; 17
 13e:	08 95       	ret
		}

		else if(direction == OUTPUT)
 140:	41 30       	cpi	r20, 0x01	; 1
 142:	51 f4       	brne	.+20     	; 0x158 <SET_Direction+0xec>
		{
			SET_BIT(DDRD,pin);
 144:	21 b3       	in	r18, 0x11	; 17
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	02 c0       	rjmp	.+4      	; 0x150 <SET_Direction+0xe4>
 14c:	88 0f       	add	r24, r24
 14e:	99 1f       	adc	r25, r25
 150:	6a 95       	dec	r22
 152:	e2 f7       	brpl	.-8      	; 0x14c <SET_Direction+0xe0>
 154:	82 2b       	or	r24, r18
 156:	81 bb       	out	0x11, r24	; 17
 158:	08 95       	ret

0000015a <main>:
#define F_CPU 8000000UL //8MHz Clock frequency
#include <util/delay.h>  // For delay function

int main()
{
    SET_Direction(PORT_D,PIN_5,OUTPUT); //OCR1 to be output
 15a:	41 e0       	ldi	r20, 0x01	; 1
 15c:	65 e0       	ldi	r22, 0x05	; 5
 15e:	83 e0       	ldi	r24, 0x03	; 3
 160:	0e 94 36 00 	call	0x6c	; 0x6c <SET_Direction>
    SET_TOP_Value(20000);
 164:	80 e2       	ldi	r24, 0x20	; 32
 166:	9e e4       	ldi	r25, 0x4E	; 78
 168:	0e 94 00 01 	call	0x200	; 0x200 <SET_TOP_Value>
	SET_OCR_Value(1499); //Zero Degree
 16c:	8b ed       	ldi	r24, 0xDB	; 219
 16e:	95 e0       	ldi	r25, 0x05	; 5
 170:	0e 94 03 01 	call	0x206	; 0x206 <SET_OCR_Value>
	Timer1_Init();
 174:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <Timer1_Init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 178:	2f ef       	ldi	r18, 0xFF	; 255
 17a:	83 ed       	ldi	r24, 0xD3	; 211
 17c:	90 e3       	ldi	r25, 0x30	; 48
 17e:	21 50       	subi	r18, 0x01	; 1
 180:	80 40       	sbci	r24, 0x00	; 0
 182:	90 40       	sbci	r25, 0x00	; 0
 184:	e1 f7       	brne	.-8      	; 0x17e <main+0x24>
 186:	00 c0       	rjmp	.+0      	; 0x188 <main+0x2e>
 188:	00 00       	nop
	_delay_ms(2000); 
	SET_OCR_Value(999); //-90 degree
 18a:	87 ee       	ldi	r24, 0xE7	; 231
 18c:	93 e0       	ldi	r25, 0x03	; 3
 18e:	0e 94 03 01 	call	0x206	; 0x206 <SET_OCR_Value>
 192:	2f ef       	ldi	r18, 0xFF	; 255
 194:	83 ed       	ldi	r24, 0xD3	; 211
 196:	90 e3       	ldi	r25, 0x30	; 48
 198:	21 50       	subi	r18, 0x01	; 1
 19a:	80 40       	sbci	r24, 0x00	; 0
 19c:	90 40       	sbci	r25, 0x00	; 0
 19e:	e1 f7       	brne	.-8      	; 0x198 <main+0x3e>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <main+0x48>
 1a2:	00 00       	nop
	_delay_ms(2000);
	SET_OCR_Value(2000); //+90 degree
 1a4:	80 ed       	ldi	r24, 0xD0	; 208
 1a6:	97 e0       	ldi	r25, 0x07	; 7
 1a8:	0e 94 03 01 	call	0x206	; 0x206 <SET_OCR_Value>
 1ac:	2f ef       	ldi	r18, 0xFF	; 255
 1ae:	83 ed       	ldi	r24, 0xD3	; 211
 1b0:	90 e3       	ldi	r25, 0x30	; 48
 1b2:	21 50       	subi	r18, 0x01	; 1
 1b4:	80 40       	sbci	r24, 0x00	; 0
 1b6:	90 40       	sbci	r25, 0x00	; 0
 1b8:	e1 f7       	brne	.-8      	; 0x1b2 <main+0x58>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <main+0x62>
 1bc:	00 00       	nop
	_delay_ms(2000);
	SET_OCR_Value(1499);
 1be:	8b ed       	ldi	r24, 0xDB	; 219
 1c0:	95 e0       	ldi	r25, 0x05	; 5
 1c2:	0e 94 03 01 	call	0x206	; 0x206 <SET_OCR_Value>
 1c6:	ff cf       	rjmp	.-2      	; 0x1c6 <main+0x6c>

000001c8 <Timer1_Init>:
#include "Servo_Interface.h"

void Timer1_Init()
{
	//Set Timer1 to be in PWM fast mode
	CLR_BIT(TCCR1A,0);
 1c8:	8f b5       	in	r24, 0x2f	; 47
 1ca:	8e 7f       	andi	r24, 0xFE	; 254
 1cc:	8f bd       	out	0x2f, r24	; 47
	SET_BIT(TCCR1A,1);
 1ce:	8f b5       	in	r24, 0x2f	; 47
 1d0:	82 60       	ori	r24, 0x02	; 2
 1d2:	8f bd       	out	0x2f, r24	; 47
	SET_BIT(TCCR1B,3);
 1d4:	8e b5       	in	r24, 0x2e	; 46
 1d6:	88 60       	ori	r24, 0x08	; 8
 1d8:	8e bd       	out	0x2e, r24	; 46
	SET_BIT(TCCR1B,4);
 1da:	8e b5       	in	r24, 0x2e	; 46
 1dc:	80 61       	ori	r24, 0x10	; 16
 1de:	8e bd       	out	0x2e, r24	; 46
	
	//Set non inverting mode for fast PWM
	SET_BIT(TCCR1A,7);
 1e0:	8f b5       	in	r24, 0x2f	; 47
 1e2:	80 68       	ori	r24, 0x80	; 128
 1e4:	8f bd       	out	0x2f, r24	; 47
	CLR_BIT(TCCR1A,6);
 1e6:	8f b5       	in	r24, 0x2f	; 47
 1e8:	8f 7b       	andi	r24, 0xBF	; 191
 1ea:	8f bd       	out	0x2f, r24	; 47
	
	//Set the prescaler to 8
	CLR_BIT(TCCR1B,0);
 1ec:	8e b5       	in	r24, 0x2e	; 46
 1ee:	8e 7f       	andi	r24, 0xFE	; 254
 1f0:	8e bd       	out	0x2e, r24	; 46
	CLR_BIT(TCCR1B,2);
 1f2:	8e b5       	in	r24, 0x2e	; 46
 1f4:	8b 7f       	andi	r24, 0xFB	; 251
 1f6:	8e bd       	out	0x2e, r24	; 46
	SET_BIT(TCCR1B,1);
 1f8:	8e b5       	in	r24, 0x2e	; 46
 1fa:	82 60       	ori	r24, 0x02	; 2
 1fc:	8e bd       	out	0x2e, r24	; 46
 1fe:	08 95       	ret

00000200 <SET_TOP_Value>:
	
}

void SET_TOP_Value(u16 Top_Value)
{
	 ICR1 = Top_Value;
 200:	97 bd       	out	0x27, r25	; 39
 202:	86 bd       	out	0x26, r24	; 38
 204:	08 95       	ret

00000206 <SET_OCR_Value>:
}
void SET_OCR_Value(u16 OCR_Value)
{
	OCR1 = OCR_Value;
 206:	9b bd       	out	0x2b, r25	; 43
 208:	8a bd       	out	0x2a, r24	; 42
 20a:	08 95       	ret

0000020c <_exit>:
 20c:	f8 94       	cli

0000020e <__stop_program>:
 20e:	ff cf       	rjmp	.-2      	; 0x20e <__stop_program>
