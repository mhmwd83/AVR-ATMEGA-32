
ACD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005b6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000060a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000060a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000063c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000f0  00000000  00000000  00000678  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000114c  00000000  00000000  00000768  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000903  00000000  00000000  000018b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000971  00000000  00000000  000021b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001b0  00000000  00000000  00002b28  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004ff  00000000  00000000  00002cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a59  00000000  00000000  000031d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b0  00000000  00000000  00003c30  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 8d 02 	call	0x51a	; 0x51a <main>
  64:	0c 94 d9 02 	jmp	0x5b2	; 0x5b2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <ADC_Init>:
#include "ADC_Interface.h"

void ADC_Init()
 //Reference Voltage is AVCC 
{
  SET_BIT(ADMUX,6);
  6c:	3e 9a       	sbi	0x07, 6	; 7
  CLR_BIT(ADMUX,7);
  6e:	3f 98       	cbi	0x07, 7	; 7
  
  //Right Adjustment for ADC
  CLR_BIT(ADMUX,5);
  70:	3d 98       	cbi	0x07, 5	; 7
  
  //Prescaler of 127
  SET_BIT(ADCSRA,0);
  72:	30 9a       	sbi	0x06, 0	; 6
  SET_BIT(ADCSRA,1);
  74:	31 9a       	sbi	0x06, 1	; 6
  SET_BIT(ADCSRA,2);
  76:	32 9a       	sbi	0x06, 2	; 6
  
  //ADC Enable
 SET_BIT(ADCSRA,7);
  78:	37 9a       	sbi	0x06, 7	; 6
  7a:	08 95       	ret

0000007c <ADC_Start>:


void ADC_Start(u8 Channel)
{
	//Clear first 5 bits of ADMUX
	ADMUX &= 0b11100000; 
  7c:	97 b1       	in	r25, 0x07	; 7
  7e:	90 7e       	andi	r25, 0xE0	; 224
  80:	97 b9       	out	0x07, r25	; 7
	//Set first 5 bits of ADMUX with the channel
	ADMUX |= Channel;
  82:	97 b1       	in	r25, 0x07	; 7
  84:	89 2b       	or	r24, r25
  86:	87 b9       	out	0x07, r24	; 7
	SET_BIT(ADCSRA,6);
  88:	36 9a       	sbi	0x06, 6	; 6
	while(!GET_BIT(ADCSRA,4)); // wait until the conversion is complete
  8a:	34 9b       	sbis	0x06, 4	; 6
  8c:	fe cf       	rjmp	.-4      	; 0x8a <ADC_Start+0xe>
	
}
  8e:	08 95       	ret

00000090 <ADC_Result>:


u16 ADC_Result()
{
	return ADC_Data;
  90:	84 b1       	in	r24, 0x04	; 4
  92:	95 b1       	in	r25, 0x05	; 5
}
  94:	08 95       	ret

00000096 <Analog_Value>:
u16 Analog_Value(u16 Digital_Value)
{
	u16 Analog;
	Analog = Digital_Value*(5000UL)/1024; //Analog = Digital_Value * voltage max value/ 2^10
	//Analog = Analog/1000; //Convert from mV to Voltage
	return Analog;
  96:	9c 01       	movw	r18, r24
  98:	a8 e8       	ldi	r26, 0x88	; 136
  9a:	b3 e1       	ldi	r27, 0x13	; 19
  9c:	0e 94 ca 02 	call	0x594	; 0x594 <__umulhisi3>
  a0:	dc 01       	movw	r26, r24
  a2:	cb 01       	movw	r24, r22
  a4:	07 2e       	mov	r0, r23
  a6:	7a e0       	ldi	r23, 0x0A	; 10
  a8:	b6 95       	lsr	r27
  aa:	a7 95       	ror	r26
  ac:	97 95       	ror	r25
  ae:	87 95       	ror	r24
  b0:	7a 95       	dec	r23
  b2:	d1 f7       	brne	.-12     	; 0xa8 <Analog_Value+0x12>
  b4:	70 2d       	mov	r23, r0
}
  b6:	08 95       	ret

000000b8 <SET_Direction>:
			PORTC |= value;
			break;

	case PORT_D:
			PORTD &= 0xF0;
			PORTD |= value;
  b8:	81 30       	cpi	r24, 0x01	; 1
  ba:	19 f1       	breq	.+70     	; 0x102 <SET_Direction+0x4a>
  bc:	30 f0       	brcs	.+12     	; 0xca <SET_Direction+0x12>
  be:	82 30       	cpi	r24, 0x02	; 2
  c0:	e1 f1       	breq	.+120    	; 0x13a <SET_Direction+0x82>
  c2:	83 30       	cpi	r24, 0x03	; 3
  c4:	09 f4       	brne	.+2      	; 0xc8 <SET_Direction+0x10>
  c6:	54 c0       	rjmp	.+168    	; 0x170 <SET_Direction+0xb8>
  c8:	08 95       	ret
  ca:	41 11       	cpse	r20, r1
  cc:	0c c0       	rjmp	.+24     	; 0xe6 <SET_Direction+0x2e>
  ce:	2a b3       	in	r18, 0x1a	; 26
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	02 c0       	rjmp	.+4      	; 0xda <SET_Direction+0x22>
  d6:	88 0f       	add	r24, r24
  d8:	99 1f       	adc	r25, r25
  da:	6a 95       	dec	r22
  dc:	e2 f7       	brpl	.-8      	; 0xd6 <SET_Direction+0x1e>
  de:	80 95       	com	r24
  e0:	82 23       	and	r24, r18
  e2:	8a bb       	out	0x1a, r24	; 26
  e4:	08 95       	ret
  e6:	41 30       	cpi	r20, 0x01	; 1
  e8:	09 f0       	breq	.+2      	; 0xec <SET_Direction+0x34>
  ea:	5c c0       	rjmp	.+184    	; 0x1a4 <SET_Direction+0xec>
  ec:	2a b3       	in	r18, 0x1a	; 26
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <SET_Direction+0x40>
  f4:	88 0f       	add	r24, r24
  f6:	99 1f       	adc	r25, r25
  f8:	6a 95       	dec	r22
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <SET_Direction+0x3c>
  fc:	82 2b       	or	r24, r18
  fe:	8a bb       	out	0x1a, r24	; 26
 100:	08 95       	ret
 102:	41 11       	cpse	r20, r1
 104:	0c c0       	rjmp	.+24     	; 0x11e <SET_Direction+0x66>
 106:	27 b3       	in	r18, 0x17	; 23
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	02 c0       	rjmp	.+4      	; 0x112 <SET_Direction+0x5a>
 10e:	88 0f       	add	r24, r24
 110:	99 1f       	adc	r25, r25
 112:	6a 95       	dec	r22
 114:	e2 f7       	brpl	.-8      	; 0x10e <SET_Direction+0x56>
 116:	80 95       	com	r24
 118:	82 23       	and	r24, r18
 11a:	87 bb       	out	0x17, r24	; 23
 11c:	08 95       	ret
 11e:	41 30       	cpi	r20, 0x01	; 1
 120:	09 f0       	breq	.+2      	; 0x124 <SET_Direction+0x6c>
 122:	40 c0       	rjmp	.+128    	; 0x1a4 <SET_Direction+0xec>
 124:	27 b3       	in	r18, 0x17	; 23
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	02 c0       	rjmp	.+4      	; 0x130 <SET_Direction+0x78>
 12c:	88 0f       	add	r24, r24
 12e:	99 1f       	adc	r25, r25
 130:	6a 95       	dec	r22
 132:	e2 f7       	brpl	.-8      	; 0x12c <SET_Direction+0x74>
 134:	82 2b       	or	r24, r18
 136:	87 bb       	out	0x17, r24	; 23
 138:	08 95       	ret
 13a:	41 11       	cpse	r20, r1
 13c:	0c c0       	rjmp	.+24     	; 0x156 <SET_Direction+0x9e>
 13e:	24 b3       	in	r18, 0x14	; 20
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	02 c0       	rjmp	.+4      	; 0x14a <SET_Direction+0x92>
 146:	88 0f       	add	r24, r24
 148:	99 1f       	adc	r25, r25
 14a:	6a 95       	dec	r22
 14c:	e2 f7       	brpl	.-8      	; 0x146 <SET_Direction+0x8e>
 14e:	80 95       	com	r24
 150:	82 23       	and	r24, r18
 152:	84 bb       	out	0x14, r24	; 20
 154:	08 95       	ret
 156:	41 30       	cpi	r20, 0x01	; 1
 158:	29 f5       	brne	.+74     	; 0x1a4 <SET_Direction+0xec>
 15a:	24 b3       	in	r18, 0x14	; 20
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	02 c0       	rjmp	.+4      	; 0x166 <SET_Direction+0xae>
 162:	88 0f       	add	r24, r24
 164:	99 1f       	adc	r25, r25
 166:	6a 95       	dec	r22
 168:	e2 f7       	brpl	.-8      	; 0x162 <SET_Direction+0xaa>
 16a:	82 2b       	or	r24, r18
 16c:	84 bb       	out	0x14, r24	; 20
 16e:	08 95       	ret
 170:	41 11       	cpse	r20, r1
 172:	0c c0       	rjmp	.+24     	; 0x18c <SET_Direction+0xd4>
 174:	21 b3       	in	r18, 0x11	; 17
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	02 c0       	rjmp	.+4      	; 0x180 <SET_Direction+0xc8>
 17c:	88 0f       	add	r24, r24
 17e:	99 1f       	adc	r25, r25
 180:	6a 95       	dec	r22
 182:	e2 f7       	brpl	.-8      	; 0x17c <SET_Direction+0xc4>
 184:	80 95       	com	r24
 186:	82 23       	and	r24, r18
 188:	81 bb       	out	0x11, r24	; 17
 18a:	08 95       	ret
 18c:	41 30       	cpi	r20, 0x01	; 1
 18e:	51 f4       	brne	.+20     	; 0x1a4 <SET_Direction+0xec>
 190:	21 b3       	in	r18, 0x11	; 17
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	02 c0       	rjmp	.+4      	; 0x19c <SET_Direction+0xe4>
 198:	88 0f       	add	r24, r24
 19a:	99 1f       	adc	r25, r25
 19c:	6a 95       	dec	r22
 19e:	e2 f7       	brpl	.-8      	; 0x198 <SET_Direction+0xe0>
 1a0:	82 2b       	or	r24, r18
 1a2:	81 bb       	out	0x11, r24	; 17
 1a4:	08 95       	ret

000001a6 <SET_Value>:
 1a6:	81 30       	cpi	r24, 0x01	; 1
 1a8:	19 f1       	breq	.+70     	; 0x1f0 <SET_Value+0x4a>
 1aa:	30 f0       	brcs	.+12     	; 0x1b8 <SET_Value+0x12>
 1ac:	82 30       	cpi	r24, 0x02	; 2
 1ae:	e1 f1       	breq	.+120    	; 0x228 <SET_Value+0x82>
 1b0:	83 30       	cpi	r24, 0x03	; 3
 1b2:	09 f4       	brne	.+2      	; 0x1b6 <SET_Value+0x10>
 1b4:	54 c0       	rjmp	.+168    	; 0x25e <SET_Value+0xb8>
 1b6:	08 95       	ret
 1b8:	41 11       	cpse	r20, r1
 1ba:	0c c0       	rjmp	.+24     	; 0x1d4 <SET_Value+0x2e>
 1bc:	2b b3       	in	r18, 0x1b	; 27
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <SET_Value+0x22>
 1c4:	88 0f       	add	r24, r24
 1c6:	99 1f       	adc	r25, r25
 1c8:	6a 95       	dec	r22
 1ca:	e2 f7       	brpl	.-8      	; 0x1c4 <SET_Value+0x1e>
 1cc:	80 95       	com	r24
 1ce:	82 23       	and	r24, r18
 1d0:	8b bb       	out	0x1b, r24	; 27
 1d2:	08 95       	ret
 1d4:	41 30       	cpi	r20, 0x01	; 1
 1d6:	09 f0       	breq	.+2      	; 0x1da <SET_Value+0x34>
 1d8:	5c c0       	rjmp	.+184    	; 0x292 <SET_Value+0xec>
 1da:	2b b3       	in	r18, 0x1b	; 27
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <SET_Value+0x40>
 1e2:	88 0f       	add	r24, r24
 1e4:	99 1f       	adc	r25, r25
 1e6:	6a 95       	dec	r22
 1e8:	e2 f7       	brpl	.-8      	; 0x1e2 <SET_Value+0x3c>
 1ea:	82 2b       	or	r24, r18
 1ec:	8b bb       	out	0x1b, r24	; 27
 1ee:	08 95       	ret
 1f0:	41 11       	cpse	r20, r1
 1f2:	0c c0       	rjmp	.+24     	; 0x20c <SET_Value+0x66>
 1f4:	28 b3       	in	r18, 0x18	; 24
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <SET_Value+0x5a>
 1fc:	88 0f       	add	r24, r24
 1fe:	99 1f       	adc	r25, r25
 200:	6a 95       	dec	r22
 202:	e2 f7       	brpl	.-8      	; 0x1fc <SET_Value+0x56>
 204:	80 95       	com	r24
 206:	82 23       	and	r24, r18
 208:	88 bb       	out	0x18, r24	; 24
 20a:	08 95       	ret
 20c:	41 30       	cpi	r20, 0x01	; 1
 20e:	09 f0       	breq	.+2      	; 0x212 <SET_Value+0x6c>
 210:	40 c0       	rjmp	.+128    	; 0x292 <SET_Value+0xec>
 212:	28 b3       	in	r18, 0x18	; 24
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	02 c0       	rjmp	.+4      	; 0x21e <SET_Value+0x78>
 21a:	88 0f       	add	r24, r24
 21c:	99 1f       	adc	r25, r25
 21e:	6a 95       	dec	r22
 220:	e2 f7       	brpl	.-8      	; 0x21a <SET_Value+0x74>
 222:	82 2b       	or	r24, r18
 224:	88 bb       	out	0x18, r24	; 24
 226:	08 95       	ret
 228:	41 11       	cpse	r20, r1
 22a:	0c c0       	rjmp	.+24     	; 0x244 <SET_Value+0x9e>
 22c:	25 b3       	in	r18, 0x15	; 21
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	02 c0       	rjmp	.+4      	; 0x238 <SET_Value+0x92>
 234:	88 0f       	add	r24, r24
 236:	99 1f       	adc	r25, r25
 238:	6a 95       	dec	r22
 23a:	e2 f7       	brpl	.-8      	; 0x234 <SET_Value+0x8e>
 23c:	80 95       	com	r24
 23e:	82 23       	and	r24, r18
 240:	85 bb       	out	0x15, r24	; 21
 242:	08 95       	ret
 244:	41 30       	cpi	r20, 0x01	; 1
 246:	29 f5       	brne	.+74     	; 0x292 <SET_Value+0xec>
 248:	25 b3       	in	r18, 0x15	; 21
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	02 c0       	rjmp	.+4      	; 0x254 <SET_Value+0xae>
 250:	88 0f       	add	r24, r24
 252:	99 1f       	adc	r25, r25
 254:	6a 95       	dec	r22
 256:	e2 f7       	brpl	.-8      	; 0x250 <SET_Value+0xaa>
 258:	82 2b       	or	r24, r18
 25a:	85 bb       	out	0x15, r24	; 21
 25c:	08 95       	ret
 25e:	41 11       	cpse	r20, r1
 260:	0c c0       	rjmp	.+24     	; 0x27a <SET_Value+0xd4>
 262:	22 b3       	in	r18, 0x12	; 18
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	02 c0       	rjmp	.+4      	; 0x26e <SET_Value+0xc8>
 26a:	88 0f       	add	r24, r24
 26c:	99 1f       	adc	r25, r25
 26e:	6a 95       	dec	r22
 270:	e2 f7       	brpl	.-8      	; 0x26a <SET_Value+0xc4>
 272:	80 95       	com	r24
 274:	82 23       	and	r24, r18
 276:	82 bb       	out	0x12, r24	; 18
 278:	08 95       	ret
 27a:	41 30       	cpi	r20, 0x01	; 1
 27c:	51 f4       	brne	.+20     	; 0x292 <SET_Value+0xec>
 27e:	22 b3       	in	r18, 0x12	; 18
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	02 c0       	rjmp	.+4      	; 0x28a <SET_Value+0xe4>
 286:	88 0f       	add	r24, r24
 288:	99 1f       	adc	r25, r25
 28a:	6a 95       	dec	r22
 28c:	e2 f7       	brpl	.-8      	; 0x286 <SET_Value+0xe0>
 28e:	82 2b       	or	r24, r18
 290:	82 bb       	out	0x12, r24	; 18
 292:	08 95       	ret

00000294 <SET_Direction_4MSB>:
 294:	81 30       	cpi	r24, 0x01	; 1
 296:	91 f0       	breq	.+36     	; 0x2bc <SET_Direction_4MSB+0x28>
 298:	28 f0       	brcs	.+10     	; 0x2a4 <SET_Direction_4MSB+0x10>
 29a:	82 30       	cpi	r24, 0x02	; 2
 29c:	d9 f0       	breq	.+54     	; 0x2d4 <SET_Direction_4MSB+0x40>
 29e:	83 30       	cpi	r24, 0x03	; 3
 2a0:	29 f1       	breq	.+74     	; 0x2ec <SET_Direction_4MSB+0x58>
 2a2:	08 95       	ret
 2a4:	61 11       	cpse	r22, r1
 2a6:	04 c0       	rjmp	.+8      	; 0x2b0 <SET_Direction_4MSB+0x1c>
 2a8:	8a b3       	in	r24, 0x1a	; 26
 2aa:	8f 70       	andi	r24, 0x0F	; 15
 2ac:	8a bb       	out	0x1a, r24	; 26
 2ae:	08 95       	ret
 2b0:	61 30       	cpi	r22, 0x01	; 1
 2b2:	39 f5       	brne	.+78     	; 0x302 <SET_Direction_4MSB+0x6e>
 2b4:	8a b3       	in	r24, 0x1a	; 26
 2b6:	80 6f       	ori	r24, 0xF0	; 240
 2b8:	8a bb       	out	0x1a, r24	; 26
 2ba:	08 95       	ret
 2bc:	61 11       	cpse	r22, r1
 2be:	04 c0       	rjmp	.+8      	; 0x2c8 <SET_Direction_4MSB+0x34>
 2c0:	87 b3       	in	r24, 0x17	; 23
 2c2:	8f 70       	andi	r24, 0x0F	; 15
 2c4:	87 bb       	out	0x17, r24	; 23
 2c6:	08 95       	ret
 2c8:	61 30       	cpi	r22, 0x01	; 1
 2ca:	d9 f4       	brne	.+54     	; 0x302 <SET_Direction_4MSB+0x6e>
 2cc:	87 b3       	in	r24, 0x17	; 23
 2ce:	80 6f       	ori	r24, 0xF0	; 240
 2d0:	87 bb       	out	0x17, r24	; 23
 2d2:	08 95       	ret
 2d4:	61 11       	cpse	r22, r1
 2d6:	04 c0       	rjmp	.+8      	; 0x2e0 <SET_Direction_4MSB+0x4c>
 2d8:	84 b3       	in	r24, 0x14	; 20
 2da:	8f 70       	andi	r24, 0x0F	; 15
 2dc:	84 bb       	out	0x14, r24	; 20
 2de:	08 95       	ret
 2e0:	61 30       	cpi	r22, 0x01	; 1
 2e2:	79 f4       	brne	.+30     	; 0x302 <SET_Direction_4MSB+0x6e>
 2e4:	84 b3       	in	r24, 0x14	; 20
 2e6:	80 6f       	ori	r24, 0xF0	; 240
 2e8:	84 bb       	out	0x14, r24	; 20
 2ea:	08 95       	ret
 2ec:	61 11       	cpse	r22, r1
 2ee:	04 c0       	rjmp	.+8      	; 0x2f8 <SET_Direction_4MSB+0x64>
 2f0:	81 b3       	in	r24, 0x11	; 17
 2f2:	8f 70       	andi	r24, 0x0F	; 15
 2f4:	81 bb       	out	0x11, r24	; 17
 2f6:	08 95       	ret
 2f8:	61 30       	cpi	r22, 0x01	; 1
 2fa:	19 f4       	brne	.+6      	; 0x302 <SET_Direction_4MSB+0x6e>
 2fc:	81 b3       	in	r24, 0x11	; 17
 2fe:	80 6f       	ori	r24, 0xF0	; 240
 300:	81 bb       	out	0x11, r24	; 17
 302:	08 95       	ret

00000304 <SET_Value_4MSB>:
}

/*   Function to set the value of the 4MSB pins    */
void SET_Value_4MSB(u8 port, u8 value)
{
	switch(port)
 304:	81 30       	cpi	r24, 0x01	; 1
 306:	89 f0       	breq	.+34     	; 0x32a <SET_Value_4MSB+0x26>
 308:	28 f0       	brcs	.+10     	; 0x314 <SET_Value_4MSB+0x10>
 30a:	82 30       	cpi	r24, 0x02	; 2
 30c:	c9 f0       	breq	.+50     	; 0x340 <SET_Value_4MSB+0x3c>
 30e:	83 30       	cpi	r24, 0x03	; 3
 310:	11 f1       	breq	.+68     	; 0x356 <SET_Value_4MSB+0x52>
 312:	08 95       	ret
	{
		case PORT_A:
		PORTA &= 0x0F;
 314:	8b b3       	in	r24, 0x1b	; 27
 316:	8f 70       	andi	r24, 0x0F	; 15
 318:	8b bb       	out	0x1b, r24	; 27
		PORTA |= value<<4;
 31a:	8b b3       	in	r24, 0x1b	; 27
 31c:	90 e1       	ldi	r25, 0x10	; 16
 31e:	69 9f       	mul	r22, r25
 320:	b0 01       	movw	r22, r0
 322:	11 24       	eor	r1, r1
 324:	68 2b       	or	r22, r24
 326:	6b bb       	out	0x1b, r22	; 27
		break;
 328:	08 95       	ret

		case PORT_B:
		PORTB &= 0x0F;
 32a:	88 b3       	in	r24, 0x18	; 24
 32c:	8f 70       	andi	r24, 0x0F	; 15
 32e:	88 bb       	out	0x18, r24	; 24
		PORTB |= value<<4;
 330:	88 b3       	in	r24, 0x18	; 24
 332:	90 e1       	ldi	r25, 0x10	; 16
 334:	69 9f       	mul	r22, r25
 336:	b0 01       	movw	r22, r0
 338:	11 24       	eor	r1, r1
 33a:	68 2b       	or	r22, r24
 33c:	68 bb       	out	0x18, r22	; 24
		break;
 33e:	08 95       	ret
		
		case PORT_C:
		PORTC &= 0x0F;
 340:	85 b3       	in	r24, 0x15	; 21
 342:	8f 70       	andi	r24, 0x0F	; 15
 344:	85 bb       	out	0x15, r24	; 21
		PORTC |= value<<4;
 346:	85 b3       	in	r24, 0x15	; 21
 348:	90 e1       	ldi	r25, 0x10	; 16
 34a:	69 9f       	mul	r22, r25
 34c:	b0 01       	movw	r22, r0
 34e:	11 24       	eor	r1, r1
 350:	68 2b       	or	r22, r24
 352:	65 bb       	out	0x15, r22	; 21
		break;
 354:	08 95       	ret

		case PORT_D:
		PORTD &= 0x0F;
 356:	82 b3       	in	r24, 0x12	; 18
 358:	8f 70       	andi	r24, 0x0F	; 15
 35a:	82 bb       	out	0x12, r24	; 18
		PORTD |= value<<4;
 35c:	82 b3       	in	r24, 0x12	; 18
 35e:	90 e1       	ldi	r25, 0x10	; 16
 360:	69 9f       	mul	r22, r25
 362:	b0 01       	movw	r22, r0
 364:	11 24       	eor	r1, r1
 366:	68 2b       	or	r22, r24
 368:	62 bb       	out	0x12, r22	; 18
 36a:	08 95       	ret

0000036c <LCD_SendCommands>:
	LCD_SendCommands(Entry_Mode);     //send Entry Mode for 4LSB
}

//Send Commands Function
void LCD_SendCommands(u8 Command)
{   //RS pin connected to PORT C pin 0
 36c:	cf 93       	push	r28
 36e:	c8 2f       	mov	r28, r24
	SET_Value(PORT_C,PIN_0,LOW);      //Set RS pin to zero for write operation
 370:	40 e0       	ldi	r20, 0x00	; 0
 372:	60 e0       	ldi	r22, 0x00	; 0
 374:	82 e0       	ldi	r24, 0x02	; 2
 376:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <SET_Value>
	
	//RW pin connected to PORT C pin 1
	SET_Value(PORT_C,PIN_1,LOW);     //Set RW pin to zero for write operation
 37a:	40 e0       	ldi	r20, 0x00	; 0
 37c:	61 e0       	ldi	r22, 0x01	; 1
 37e:	82 e0       	ldi	r24, 0x02	; 2
 380:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <SET_Value>
	
	//Data pins connected to the 4MSB of PORT C
	SET_Value_4MSB(PORT_C,Command); //Send command to the MSB of PORT C
 384:	6c 2f       	mov	r22, r28
 386:	82 e0       	ldi	r24, 0x02	; 2
 388:	0e 94 82 01 	call	0x304	; 0x304 <SET_Value_4MSB>
	
	//EN pin connected to PORT C pin 2
	SET_Value(PORT_C,PIN_2,HIGH); //Set EN pin to 1 
 38c:	41 e0       	ldi	r20, 0x01	; 1
 38e:	62 e0       	ldi	r22, 0x02	; 2
 390:	82 e0       	ldi	r24, 0x02	; 2
 392:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <SET_Value>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 396:	8f e0       	ldi	r24, 0x0F	; 15
 398:	97 e2       	ldi	r25, 0x27	; 39
 39a:	01 97       	sbiw	r24, 0x01	; 1
 39c:	f1 f7       	brne	.-4      	; 0x39a <LCD_SendCommands+0x2e>
 39e:	00 c0       	rjmp	.+0      	; 0x3a0 <LCD_SendCommands+0x34>
 3a0:	00 00       	nop
	
	//Delay for 5 m sec
	_delay_ms(5);
	
	//EN pin connected to PORT C pin 2
	SET_Value(PORT_C,PIN_2,LOW); //Set EN pin to 0 
 3a2:	40 e0       	ldi	r20, 0x00	; 0
 3a4:	62 e0       	ldi	r22, 0x02	; 2
 3a6:	82 e0       	ldi	r24, 0x02	; 2
 3a8:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <SET_Value>
 3ac:	8f ec       	ldi	r24, 0xCF	; 207
 3ae:	97 e0       	ldi	r25, 0x07	; 7
 3b0:	01 97       	sbiw	r24, 0x01	; 1
 3b2:	f1 f7       	brne	.-4      	; 0x3b0 <LCD_SendCommands+0x44>
 3b4:	00 c0       	rjmp	.+0      	; 0x3b6 <LCD_SendCommands+0x4a>
 3b6:	00 00       	nop
	
	//Delay for 1 m sec
	_delay_ms(1);
}
 3b8:	cf 91       	pop	r28
 3ba:	08 95       	ret

000003bc <LCD_Init>:
#include <util/delay.h>  // For delay function

//LCD Initialization Function
void LCD_Init()
{
	LCD_SendCommands(Function_SET>>4);   //send 4MSB
 3bc:	82 e0       	ldi	r24, 0x02	; 2
 3be:	0e 94 b6 01 	call	0x36c	; 0x36c <LCD_SendCommands>
	LCD_SendCommands(Function_SET>>4);  //send 4MSB again
 3c2:	82 e0       	ldi	r24, 0x02	; 2
 3c4:	0e 94 b6 01 	call	0x36c	; 0x36c <LCD_SendCommands>
	LCD_SendCommands(Function_SET);    //send 4LSB
 3c8:	88 e2       	ldi	r24, 0x28	; 40
 3ca:	0e 94 b6 01 	call	0x36c	; 0x36c <LCD_SendCommands>
	LCD_SendCommands(Display_ON_OFF>>4);    //send ON-OFF for 4LSB
 3ce:	80 e0       	ldi	r24, 0x00	; 0
 3d0:	0e 94 b6 01 	call	0x36c	; 0x36c <LCD_SendCommands>
	LCD_SendCommands(Display_ON_OFF);      //send ON-OFF for 4LSB
 3d4:	8f e0       	ldi	r24, 0x0F	; 15
 3d6:	0e 94 b6 01 	call	0x36c	; 0x36c <LCD_SendCommands>
	LCD_SendCommands(Display_Clear>>4);    //send Clear for 4LSB
 3da:	80 e0       	ldi	r24, 0x00	; 0
 3dc:	0e 94 b6 01 	call	0x36c	; 0x36c <LCD_SendCommands>
	LCD_SendCommands(Display_Clear);      //send Clear for 4LSB
 3e0:	81 e0       	ldi	r24, 0x01	; 1
 3e2:	0e 94 b6 01 	call	0x36c	; 0x36c <LCD_SendCommands>
 3e6:	8f e9       	ldi	r24, 0x9F	; 159
 3e8:	9f e0       	ldi	r25, 0x0F	; 15
 3ea:	01 97       	sbiw	r24, 0x01	; 1
 3ec:	f1 f7       	brne	.-4      	; 0x3ea <LCD_Init+0x2e>
 3ee:	00 c0       	rjmp	.+0      	; 0x3f0 <LCD_Init+0x34>
 3f0:	00 00       	nop
	_delay_ms(2);
	LCD_SendCommands(Entry_Mode>>4);   //send Entry Mode for 4MSB
 3f2:	80 e0       	ldi	r24, 0x00	; 0
 3f4:	0e 94 b6 01 	call	0x36c	; 0x36c <LCD_SendCommands>
	LCD_SendCommands(Entry_Mode);     //send Entry Mode for 4LSB
 3f8:	86 e0       	ldi	r24, 0x06	; 6
 3fa:	0e 94 b6 01 	call	0x36c	; 0x36c <LCD_SendCommands>
 3fe:	08 95       	ret

00000400 <LCD_SendData>:
	_delay_ms(1);
}

//Send Data Function
void LCD_SendData(u8 Data)
{   //RS pin connected to PORT C pin 0
 400:	cf 93       	push	r28
 402:	c8 2f       	mov	r28, r24
	SET_Value(PORT_C,PIN_0,HIGH);      //Set RS pin to one for write operation
 404:	41 e0       	ldi	r20, 0x01	; 1
 406:	60 e0       	ldi	r22, 0x00	; 0
 408:	82 e0       	ldi	r24, 0x02	; 2
 40a:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <SET_Value>
	
	//RW pin connected to PORT C pin 1
	SET_Value(PORT_C,PIN_1,LOW);     //Set RW pin to zero for write operation
 40e:	40 e0       	ldi	r20, 0x00	; 0
 410:	61 e0       	ldi	r22, 0x01	; 1
 412:	82 e0       	ldi	r24, 0x02	; 2
 414:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <SET_Value>
	
	//Data pins connected to the 4MSB of PORT C
	SET_Value_4MSB(PORT_C,Data); //Send command to the MSB of PORT C
 418:	6c 2f       	mov	r22, r28
 41a:	82 e0       	ldi	r24, 0x02	; 2
 41c:	0e 94 82 01 	call	0x304	; 0x304 <SET_Value_4MSB>
    
	//EN pin connected to PORT C pin 2
	SET_Value(PORT_C,PIN_2,HIGH); //Set EN pin to 1
 420:	41 e0       	ldi	r20, 0x01	; 1
 422:	62 e0       	ldi	r22, 0x02	; 2
 424:	82 e0       	ldi	r24, 0x02	; 2
 426:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <SET_Value>
 42a:	8f e0       	ldi	r24, 0x0F	; 15
 42c:	97 e2       	ldi	r25, 0x27	; 39
 42e:	01 97       	sbiw	r24, 0x01	; 1
 430:	f1 f7       	brne	.-4      	; 0x42e <LCD_SendData+0x2e>
 432:	00 c0       	rjmp	.+0      	; 0x434 <LCD_SendData+0x34>
 434:	00 00       	nop
	
	//Delay for 5 msec
	_delay_ms(5);
	
	//EN pin connected to PORT C pin 2
	SET_Value(PORT_C,PIN_2,LOW); //Set EN pin to 0
 436:	40 e0       	ldi	r20, 0x00	; 0
 438:	62 e0       	ldi	r22, 0x02	; 2
 43a:	82 e0       	ldi	r24, 0x02	; 2
 43c:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <SET_Value>
 440:	8f ec       	ldi	r24, 0xCF	; 207
 442:	97 e0       	ldi	r25, 0x07	; 7
 444:	01 97       	sbiw	r24, 0x01	; 1
 446:	f1 f7       	brne	.-4      	; 0x444 <LCD_SendData+0x44>
 448:	00 c0       	rjmp	.+0      	; 0x44a <LCD_SendData+0x4a>
 44a:	00 00       	nop
	
	//Delay for 1 m sec
	_delay_ms(1);
}
 44c:	cf 91       	pop	r28
 44e:	08 95       	ret

00000450 <LCD_SendData_4BitMode>:

//Send Data with 4bits Function
void LCD_SendData_4BitMode(u8 Data)
{
 450:	cf 93       	push	r28
 452:	c8 2f       	mov	r28, r24
	LCD_SendData(Data>>4); //Send 4MSB first
 454:	82 95       	swap	r24
 456:	8f 70       	andi	r24, 0x0F	; 15
 458:	0e 94 00 02 	call	0x400	; 0x400 <LCD_SendData>
	LCD_SendData(Data);   //Send 4LSB second
 45c:	8c 2f       	mov	r24, r28
 45e:	0e 94 00 02 	call	0x400	; 0x400 <LCD_SendData>
}
 462:	cf 91       	pop	r28
 464:	08 95       	ret

00000466 <LCD_SendNumbers>:

//Send Number Function
void LCD_SendNumbers(u16 Number)
{
 466:	1f 93       	push	r17
 468:	cf 93       	push	r28
 46a:	df 93       	push	r29
 46c:	00 d0       	rcall	.+0      	; 0x46e <LCD_SendNumbers+0x8>
 46e:	00 d0       	rcall	.+0      	; 0x470 <LCD_SendNumbers+0xa>
 470:	1f 92       	push	r1
 472:	cd b7       	in	r28, 0x3d	; 61
 474:	de b7       	in	r29, 0x3e	; 62
 476:	ac 01       	movw	r20, r24
	u8 arr[5];
	u8 i =0;
	if (Number == 0)
 478:	89 2b       	or	r24, r25
 47a:	21 f4       	brne	.+8      	; 0x484 <LCD_SendNumbers+0x1e>
	   {
	     LCD_SendData_4BitMode('0');		
 47c:	80 e3       	ldi	r24, 0x30	; 48
 47e:	0e 94 28 02 	call	0x450	; 0x450 <LCD_SendData_4BitMode>
 482:	42 c0       	rjmp	.+132    	; 0x508 <LCD_SendNumbers+0xa2>
 484:	10 e0       	ldi	r17, 0x00	; 0
 486:	01 c0       	rjmp	.+2      	; 0x48a <LCD_SendNumbers+0x24>
       {
	      while(Number !=0)
	     {
		   arr[i]= Number %10;
		   Number /= 10;
		   i++;
 488:	18 2f       	mov	r17, r24
	    }
   else
       {
	      while(Number !=0)
	     {
		   arr[i]= Number %10;
 48a:	9a 01       	movw	r18, r20
 48c:	ad ec       	ldi	r26, 0xCD	; 205
 48e:	bc ec       	ldi	r27, 0xCC	; 204
 490:	0e 94 ca 02 	call	0x594	; 0x594 <__umulhisi3>
 494:	96 95       	lsr	r25
 496:	87 95       	ror	r24
 498:	96 95       	lsr	r25
 49a:	87 95       	ror	r24
 49c:	96 95       	lsr	r25
 49e:	87 95       	ror	r24
 4a0:	9c 01       	movw	r18, r24
 4a2:	22 0f       	add	r18, r18
 4a4:	33 1f       	adc	r19, r19
 4a6:	88 0f       	add	r24, r24
 4a8:	99 1f       	adc	r25, r25
 4aa:	88 0f       	add	r24, r24
 4ac:	99 1f       	adc	r25, r25
 4ae:	88 0f       	add	r24, r24
 4b0:	99 1f       	adc	r25, r25
 4b2:	82 0f       	add	r24, r18
 4b4:	93 1f       	adc	r25, r19
 4b6:	9a 01       	movw	r18, r20
 4b8:	28 1b       	sub	r18, r24
 4ba:	39 0b       	sbc	r19, r25
 4bc:	e1 e0       	ldi	r30, 0x01	; 1
 4be:	f0 e0       	ldi	r31, 0x00	; 0
 4c0:	ec 0f       	add	r30, r28
 4c2:	fd 1f       	adc	r31, r29
 4c4:	e1 0f       	add	r30, r17
 4c6:	f1 1d       	adc	r31, r1
 4c8:	20 83       	st	Z, r18
		   Number /= 10;
 4ca:	9a 01       	movw	r18, r20
 4cc:	0e 94 ca 02 	call	0x594	; 0x594 <__umulhisi3>
 4d0:	ac 01       	movw	r20, r24
 4d2:	56 95       	lsr	r21
 4d4:	47 95       	ror	r20
 4d6:	56 95       	lsr	r21
 4d8:	47 95       	ror	r20
 4da:	56 95       	lsr	r21
 4dc:	47 95       	ror	r20
		   i++;
 4de:	81 e0       	ldi	r24, 0x01	; 1
 4e0:	81 0f       	add	r24, r17
	   {
	     LCD_SendData_4BitMode('0');		
	    }
   else
       {
	      while(Number !=0)
 4e2:	41 15       	cp	r20, r1
 4e4:	51 05       	cpc	r21, r1
 4e6:	81 f6       	brne	.-96     	; 0x488 <LCD_SendNumbers+0x22>
		   i++;
	      }
        }
		
	//for send array as reversed 
	for(s8 j=i-1;j>=0;j--)
 4e8:	11 23       	and	r17, r17
 4ea:	74 f0       	brlt	.+28     	; 0x508 <LCD_SendNumbers+0xa2>
	{
     LCD_SendData_4BitMode(arr[j]+48);	
 4ec:	e1 e0       	ldi	r30, 0x01	; 1
 4ee:	f0 e0       	ldi	r31, 0x00	; 0
 4f0:	ec 0f       	add	r30, r28
 4f2:	fd 1f       	adc	r31, r29
 4f4:	e1 0f       	add	r30, r17
 4f6:	f1 1d       	adc	r31, r1
 4f8:	17 fd       	sbrc	r17, 7
 4fa:	fa 95       	dec	r31
 4fc:	80 81       	ld	r24, Z
 4fe:	80 5d       	subi	r24, 0xD0	; 208
 500:	0e 94 28 02 	call	0x450	; 0x450 <LCD_SendData_4BitMode>
 504:	11 50       	subi	r17, 0x01	; 1
		   i++;
	      }
        }
		
	//for send array as reversed 
	for(s8 j=i-1;j>=0;j--)
 506:	92 f7       	brpl	.-28     	; 0x4ec <LCD_SendNumbers+0x86>
	{
     LCD_SendData_4BitMode(arr[j]+48);	
	}
}
 508:	0f 90       	pop	r0
 50a:	0f 90       	pop	r0
 50c:	0f 90       	pop	r0
 50e:	0f 90       	pop	r0
 510:	0f 90       	pop	r0
 512:	df 91       	pop	r29
 514:	cf 91       	pop	r28
 516:	1f 91       	pop	r17
 518:	08 95       	ret

0000051a <main>:
#include "DIO_Interface.h"


int main()
{
    SET_Direction(PORT_C,PIN_0,OUTPUT);
 51a:	41 e0       	ldi	r20, 0x01	; 1
 51c:	60 e0       	ldi	r22, 0x00	; 0
 51e:	82 e0       	ldi	r24, 0x02	; 2
 520:	0e 94 5c 00 	call	0xb8	; 0xb8 <SET_Direction>
	SET_Direction(PORT_C,PIN_1,OUTPUT);
 524:	41 e0       	ldi	r20, 0x01	; 1
 526:	61 e0       	ldi	r22, 0x01	; 1
 528:	82 e0       	ldi	r24, 0x02	; 2
 52a:	0e 94 5c 00 	call	0xb8	; 0xb8 <SET_Direction>
	SET_Direction(PORT_C,PIN_2,OUTPUT);
 52e:	41 e0       	ldi	r20, 0x01	; 1
 530:	62 e0       	ldi	r22, 0x02	; 2
 532:	82 e0       	ldi	r24, 0x02	; 2
 534:	0e 94 5c 00 	call	0xb8	; 0xb8 <SET_Direction>
	SET_Direction_4MSB(PORT_C,OUTPUT);
 538:	61 e0       	ldi	r22, 0x01	; 1
 53a:	82 e0       	ldi	r24, 0x02	; 2
 53c:	0e 94 4a 01 	call	0x294	; 0x294 <SET_Direction_4MSB>
	SET_Direction(PORT_A,PIN_0,INPUT);
 540:	40 e0       	ldi	r20, 0x00	; 0
 542:	60 e0       	ldi	r22, 0x00	; 0
 544:	80 e0       	ldi	r24, 0x00	; 0
 546:	0e 94 5c 00 	call	0xb8	; 0xb8 <SET_Direction>
	
    LCD_Init();
 54a:	0e 94 de 01 	call	0x3bc	; 0x3bc <LCD_Init>
	ADC_Init();
 54e:	0e 94 36 00 	call	0x6c	; 0x6c <ADC_Init>
	
	u16 Digital;
	u16 Analog = 0;
	u16 Analog_Previous = 0;
 552:	00 e0       	ldi	r16, 0x00	; 0
 554:	10 e0       	ldi	r17, 0x00	; 0
  while (1) 
  {
   //Start Conversion (Convert analog to digital)
   ADC_Start(0); //Choose analog channel 0
 556:	80 e0       	ldi	r24, 0x00	; 0
 558:	0e 94 3e 00 	call	0x7c	; 0x7c <ADC_Start>
   
   //Set Result to digital variable
   Digital = ADC_Result();
 55c:	0e 94 48 00 	call	0x90	; 0x90 <ADC_Result>
   
   //Convert digital to analog voltage
   Analog = Analog_Value(Digital);
 560:	0e 94 4b 00 	call	0x96	; 0x96 <Analog_Value>
 564:	ec 01       	movw	r28, r24
   if(Analog != Analog_Previous)
 566:	08 17       	cp	r16, r24
 568:	19 07       	cpc	r17, r25
 56a:	49 f0       	breq	.+18     	; 0x57e <main+0x64>
      {
	    LCD_SendCommands(0x01>>4); //erase the LCD 4LSB (>>4 woring with 4bit mode)
 56c:	80 e0       	ldi	r24, 0x00	; 0
 56e:	0e 94 b6 01 	call	0x36c	; 0x36c <LCD_SendCommands>
		LCD_SendCommands(0x01); //erase the LCD 4MSB
 572:	81 e0       	ldi	r24, 0x01	; 1
 574:	0e 94 b6 01 	call	0x36c	; 0x36c <LCD_SendCommands>
	    LCD_SendNumbers(Analog); //Send analog data to the LCD 
 578:	ce 01       	movw	r24, r28
 57a:	0e 94 33 02 	call	0x466	; 0x466 <LCD_SendNumbers>
 57e:	2f ef       	ldi	r18, 0xFF	; 255
 580:	84 e3       	ldi	r24, 0x34	; 52
 582:	9c e0       	ldi	r25, 0x0C	; 12
 584:	21 50       	subi	r18, 0x01	; 1
 586:	80 40       	sbci	r24, 0x00	; 0
 588:	90 40       	sbci	r25, 0x00	; 0
 58a:	e1 f7       	brne	.-8      	; 0x584 <main+0x6a>
 58c:	00 c0       	rjmp	.+0      	; 0x58e <main+0x74>
 58e:	00 00       	nop
 590:	8e 01       	movw	r16, r28
 592:	e1 cf       	rjmp	.-62     	; 0x556 <main+0x3c>

00000594 <__umulhisi3>:
 594:	a2 9f       	mul	r26, r18
 596:	b0 01       	movw	r22, r0
 598:	b3 9f       	mul	r27, r19
 59a:	c0 01       	movw	r24, r0
 59c:	a3 9f       	mul	r26, r19
 59e:	70 0d       	add	r23, r0
 5a0:	81 1d       	adc	r24, r1
 5a2:	11 24       	eor	r1, r1
 5a4:	91 1d       	adc	r25, r1
 5a6:	b2 9f       	mul	r27, r18
 5a8:	70 0d       	add	r23, r0
 5aa:	81 1d       	adc	r24, r1
 5ac:	11 24       	eor	r1, r1
 5ae:	91 1d       	adc	r25, r1
 5b0:	08 95       	ret

000005b2 <_exit>:
 5b2:	f8 94       	cli

000005b4 <__stop_program>:
 5b4:	ff cf       	rjmp	.-2      	; 0x5b4 <__stop_program>
