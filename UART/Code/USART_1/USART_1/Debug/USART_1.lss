
USART_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002ae  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000302  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000302  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000334  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  00000370  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009b8  00000000  00000000  00000410  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006c5  00000000  00000000  00000dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000575  00000000  00000000  0000148d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000ec  00000000  00000000  00001a04  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000040b  00000000  00000000  00001af0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000596  00000000  00000000  00001efb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  00002491  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 24 01 	call	0x248	; 0x248 <main>
  64:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <SET_Direction>:
#include"DIO_Interface.h"

/*   Function to set the direction of the pin    */
void SET_Direction(u8 port, u8 pin, u8 direction)
{
	switch(port)
  6c:	81 30       	cpi	r24, 0x01	; 1
  6e:	19 f1       	breq	.+70     	; 0xb6 <SET_Direction+0x4a>
  70:	30 f0       	brcs	.+12     	; 0x7e <SET_Direction+0x12>
  72:	82 30       	cpi	r24, 0x02	; 2
  74:	e1 f1       	breq	.+120    	; 0xee <SET_Direction+0x82>
  76:	83 30       	cpi	r24, 0x03	; 3
  78:	09 f4       	brne	.+2      	; 0x7c <SET_Direction+0x10>
  7a:	54 c0       	rjmp	.+168    	; 0x124 <SET_Direction+0xb8>
  7c:	08 95       	ret
	{
	case PORT_A:
		if(direction == INPUT)
  7e:	41 11       	cpse	r20, r1
  80:	0c c0       	rjmp	.+24     	; 0x9a <SET_Direction+0x2e>
		{
			CLR_BIT(DDRA,pin);
  82:	2a b3       	in	r18, 0x1a	; 26
  84:	81 e0       	ldi	r24, 0x01	; 1
  86:	90 e0       	ldi	r25, 0x00	; 0
  88:	02 c0       	rjmp	.+4      	; 0x8e <SET_Direction+0x22>
  8a:	88 0f       	add	r24, r24
  8c:	99 1f       	adc	r25, r25
  8e:	6a 95       	dec	r22
  90:	e2 f7       	brpl	.-8      	; 0x8a <SET_Direction+0x1e>
  92:	80 95       	com	r24
  94:	82 23       	and	r24, r18
  96:	8a bb       	out	0x1a, r24	; 26
  98:	08 95       	ret
		}

		else if(direction == OUTPUT)
  9a:	41 30       	cpi	r20, 0x01	; 1
  9c:	09 f0       	breq	.+2      	; 0xa0 <SET_Direction+0x34>
  9e:	5c c0       	rjmp	.+184    	; 0x158 <SET_Direction+0xec>
		{
			SET_BIT(DDRA,pin);
  a0:	2a b3       	in	r18, 0x1a	; 26
  a2:	81 e0       	ldi	r24, 0x01	; 1
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	02 c0       	rjmp	.+4      	; 0xac <SET_Direction+0x40>
  a8:	88 0f       	add	r24, r24
  aa:	99 1f       	adc	r25, r25
  ac:	6a 95       	dec	r22
  ae:	e2 f7       	brpl	.-8      	; 0xa8 <SET_Direction+0x3c>
  b0:	82 2b       	or	r24, r18
  b2:	8a bb       	out	0x1a, r24	; 26
  b4:	08 95       	ret
		}
		break;

	case PORT_B:
		if(direction == INPUT)
  b6:	41 11       	cpse	r20, r1
  b8:	0c c0       	rjmp	.+24     	; 0xd2 <SET_Direction+0x66>
		{
			CLR_BIT(DDRB,pin);
  ba:	27 b3       	in	r18, 0x17	; 23
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <SET_Direction+0x5a>
  c2:	88 0f       	add	r24, r24
  c4:	99 1f       	adc	r25, r25
  c6:	6a 95       	dec	r22
  c8:	e2 f7       	brpl	.-8      	; 0xc2 <SET_Direction+0x56>
  ca:	80 95       	com	r24
  cc:	82 23       	and	r24, r18
  ce:	87 bb       	out	0x17, r24	; 23
  d0:	08 95       	ret
		}

		else if(direction == OUTPUT)
  d2:	41 30       	cpi	r20, 0x01	; 1
  d4:	09 f0       	breq	.+2      	; 0xd8 <SET_Direction+0x6c>
  d6:	40 c0       	rjmp	.+128    	; 0x158 <SET_Direction+0xec>
		{
			SET_BIT(DDRB,pin);
  d8:	27 b3       	in	r18, 0x17	; 23
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	02 c0       	rjmp	.+4      	; 0xe4 <SET_Direction+0x78>
  e0:	88 0f       	add	r24, r24
  e2:	99 1f       	adc	r25, r25
  e4:	6a 95       	dec	r22
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <SET_Direction+0x74>
  e8:	82 2b       	or	r24, r18
  ea:	87 bb       	out	0x17, r24	; 23
  ec:	08 95       	ret
		}
		break;

	case PORT_C:
		if(direction == INPUT)
  ee:	41 11       	cpse	r20, r1
  f0:	0c c0       	rjmp	.+24     	; 0x10a <SET_Direction+0x9e>
		{
			CLR_BIT(DDRC,pin);
  f2:	24 b3       	in	r18, 0x14	; 20
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	02 c0       	rjmp	.+4      	; 0xfe <SET_Direction+0x92>
  fa:	88 0f       	add	r24, r24
  fc:	99 1f       	adc	r25, r25
  fe:	6a 95       	dec	r22
 100:	e2 f7       	brpl	.-8      	; 0xfa <SET_Direction+0x8e>
 102:	80 95       	com	r24
 104:	82 23       	and	r24, r18
 106:	84 bb       	out	0x14, r24	; 20
 108:	08 95       	ret
		}

		else if(direction == OUTPUT)
 10a:	41 30       	cpi	r20, 0x01	; 1
 10c:	29 f5       	brne	.+74     	; 0x158 <SET_Direction+0xec>
		{
			SET_BIT(DDRC,pin);
 10e:	24 b3       	in	r18, 0x14	; 20
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	02 c0       	rjmp	.+4      	; 0x11a <SET_Direction+0xae>
 116:	88 0f       	add	r24, r24
 118:	99 1f       	adc	r25, r25
 11a:	6a 95       	dec	r22
 11c:	e2 f7       	brpl	.-8      	; 0x116 <SET_Direction+0xaa>
 11e:	82 2b       	or	r24, r18
 120:	84 bb       	out	0x14, r24	; 20
 122:	08 95       	ret
		}
		break;

	case PORT_D:
		if(direction == INPUT)
 124:	41 11       	cpse	r20, r1
 126:	0c c0       	rjmp	.+24     	; 0x140 <SET_Direction+0xd4>
		{
			CLR_BIT(DDRD,pin);
 128:	21 b3       	in	r18, 0x11	; 17
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	02 c0       	rjmp	.+4      	; 0x134 <SET_Direction+0xc8>
 130:	88 0f       	add	r24, r24
 132:	99 1f       	adc	r25, r25
 134:	6a 95       	dec	r22
 136:	e2 f7       	brpl	.-8      	; 0x130 <SET_Direction+0xc4>
 138:	80 95       	com	r24
 13a:	82 23       	and	r24, r18
 13c:	81 bb       	out	0x11, r24	; 17
 13e:	08 95       	ret
		}

		else if(direction == OUTPUT)
 140:	41 30       	cpi	r20, 0x01	; 1
 142:	51 f4       	brne	.+20     	; 0x158 <SET_Direction+0xec>
		{
			SET_BIT(DDRD,pin);
 144:	21 b3       	in	r18, 0x11	; 17
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	02 c0       	rjmp	.+4      	; 0x150 <SET_Direction+0xe4>
 14c:	88 0f       	add	r24, r24
 14e:	99 1f       	adc	r25, r25
 150:	6a 95       	dec	r22
 152:	e2 f7       	brpl	.-8      	; 0x14c <SET_Direction+0xe0>
 154:	82 2b       	or	r24, r18
 156:	81 bb       	out	0x11, r24	; 17
 158:	08 95       	ret

0000015a <SET_Value>:


/*   Function to set the value of the pin    */
void SET_Value(u8 port, u8 pin, u8 value)
{
	switch(port)
 15a:	81 30       	cpi	r24, 0x01	; 1
 15c:	19 f1       	breq	.+70     	; 0x1a4 <SET_Value+0x4a>
 15e:	30 f0       	brcs	.+12     	; 0x16c <SET_Value+0x12>
 160:	82 30       	cpi	r24, 0x02	; 2
 162:	e1 f1       	breq	.+120    	; 0x1dc <SET_Value+0x82>
 164:	83 30       	cpi	r24, 0x03	; 3
 166:	09 f4       	brne	.+2      	; 0x16a <SET_Value+0x10>
 168:	54 c0       	rjmp	.+168    	; 0x212 <SET_Value+0xb8>
 16a:	08 95       	ret
	{
	case PORT_A:
		if(value == LOW)
 16c:	41 11       	cpse	r20, r1
 16e:	0c c0       	rjmp	.+24     	; 0x188 <SET_Value+0x2e>
		{
			CLR_BIT(PORTA,pin);
 170:	2b b3       	in	r18, 0x1b	; 27
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	02 c0       	rjmp	.+4      	; 0x17c <SET_Value+0x22>
 178:	88 0f       	add	r24, r24
 17a:	99 1f       	adc	r25, r25
 17c:	6a 95       	dec	r22
 17e:	e2 f7       	brpl	.-8      	; 0x178 <SET_Value+0x1e>
 180:	80 95       	com	r24
 182:	82 23       	and	r24, r18
 184:	8b bb       	out	0x1b, r24	; 27
 186:	08 95       	ret
		}

		else if(value  == HIGH)
 188:	41 30       	cpi	r20, 0x01	; 1
 18a:	09 f0       	breq	.+2      	; 0x18e <SET_Value+0x34>
 18c:	5c c0       	rjmp	.+184    	; 0x246 <SET_Value+0xec>
		{
			SET_BIT(PORTA,pin);
 18e:	2b b3       	in	r18, 0x1b	; 27
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	02 c0       	rjmp	.+4      	; 0x19a <SET_Value+0x40>
 196:	88 0f       	add	r24, r24
 198:	99 1f       	adc	r25, r25
 19a:	6a 95       	dec	r22
 19c:	e2 f7       	brpl	.-8      	; 0x196 <SET_Value+0x3c>
 19e:	82 2b       	or	r24, r18
 1a0:	8b bb       	out	0x1b, r24	; 27
 1a2:	08 95       	ret
		}
		break;

	case PORT_B:
		if(value == LOW)
 1a4:	41 11       	cpse	r20, r1
 1a6:	0c c0       	rjmp	.+24     	; 0x1c0 <SET_Value+0x66>
		{
			CLR_BIT(PORTB,pin);
 1a8:	28 b3       	in	r18, 0x18	; 24
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <SET_Value+0x5a>
 1b0:	88 0f       	add	r24, r24
 1b2:	99 1f       	adc	r25, r25
 1b4:	6a 95       	dec	r22
 1b6:	e2 f7       	brpl	.-8      	; 0x1b0 <SET_Value+0x56>
 1b8:	80 95       	com	r24
 1ba:	82 23       	and	r24, r18
 1bc:	88 bb       	out	0x18, r24	; 24
 1be:	08 95       	ret
		}

		else if(value == HIGH)
 1c0:	41 30       	cpi	r20, 0x01	; 1
 1c2:	09 f0       	breq	.+2      	; 0x1c6 <SET_Value+0x6c>
 1c4:	40 c0       	rjmp	.+128    	; 0x246 <SET_Value+0xec>
		{
			SET_BIT(PORTB,pin);
 1c6:	28 b3       	in	r18, 0x18	; 24
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <SET_Value+0x78>
 1ce:	88 0f       	add	r24, r24
 1d0:	99 1f       	adc	r25, r25
 1d2:	6a 95       	dec	r22
 1d4:	e2 f7       	brpl	.-8      	; 0x1ce <SET_Value+0x74>
 1d6:	82 2b       	or	r24, r18
 1d8:	88 bb       	out	0x18, r24	; 24
 1da:	08 95       	ret
		}
		break;

	case PORT_C:
		if(value == LOW)
 1dc:	41 11       	cpse	r20, r1
 1de:	0c c0       	rjmp	.+24     	; 0x1f8 <SET_Value+0x9e>
		{
			CLR_BIT(PORTC,pin);
 1e0:	25 b3       	in	r18, 0x15	; 21
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	02 c0       	rjmp	.+4      	; 0x1ec <SET_Value+0x92>
 1e8:	88 0f       	add	r24, r24
 1ea:	99 1f       	adc	r25, r25
 1ec:	6a 95       	dec	r22
 1ee:	e2 f7       	brpl	.-8      	; 0x1e8 <SET_Value+0x8e>
 1f0:	80 95       	com	r24
 1f2:	82 23       	and	r24, r18
 1f4:	85 bb       	out	0x15, r24	; 21
 1f6:	08 95       	ret
		}

		else if(value == HIGH)
 1f8:	41 30       	cpi	r20, 0x01	; 1
 1fa:	29 f5       	brne	.+74     	; 0x246 <SET_Value+0xec>
		{
			SET_BIT(PORTC,pin);
 1fc:	25 b3       	in	r18, 0x15	; 21
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	02 c0       	rjmp	.+4      	; 0x208 <SET_Value+0xae>
 204:	88 0f       	add	r24, r24
 206:	99 1f       	adc	r25, r25
 208:	6a 95       	dec	r22
 20a:	e2 f7       	brpl	.-8      	; 0x204 <SET_Value+0xaa>
 20c:	82 2b       	or	r24, r18
 20e:	85 bb       	out	0x15, r24	; 21
 210:	08 95       	ret
		}
		break;

	case PORT_D:
		if(value == LOW)
 212:	41 11       	cpse	r20, r1
 214:	0c c0       	rjmp	.+24     	; 0x22e <SET_Value+0xd4>
		{
			CLR_BIT(PORTD,pin);
 216:	22 b3       	in	r18, 0x12	; 18
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	02 c0       	rjmp	.+4      	; 0x222 <SET_Value+0xc8>
 21e:	88 0f       	add	r24, r24
 220:	99 1f       	adc	r25, r25
 222:	6a 95       	dec	r22
 224:	e2 f7       	brpl	.-8      	; 0x21e <SET_Value+0xc4>
 226:	80 95       	com	r24
 228:	82 23       	and	r24, r18
 22a:	82 bb       	out	0x12, r24	; 18
 22c:	08 95       	ret
		}

		else if(value == HIGH)
 22e:	41 30       	cpi	r20, 0x01	; 1
 230:	51 f4       	brne	.+20     	; 0x246 <SET_Value+0xec>
		{
			SET_BIT(PORTD,pin);
 232:	22 b3       	in	r18, 0x12	; 18
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	02 c0       	rjmp	.+4      	; 0x23e <SET_Value+0xe4>
 23a:	88 0f       	add	r24, r24
 23c:	99 1f       	adc	r25, r25
 23e:	6a 95       	dec	r22
 240:	e2 f7       	brpl	.-8      	; 0x23a <SET_Value+0xe0>
 242:	82 2b       	or	r24, r18
 244:	82 bb       	out	0x12, r24	; 18
 246:	08 95       	ret

00000248 <main>:
#include"USART_Interface.h"
#include "DIO_Interface.h"

int main()
{
	SET_Direction(PORT_C,PIN_7,OUTPUT);  //Output for the LED
 248:	41 e0       	ldi	r20, 0x01	; 1
 24a:	67 e0       	ldi	r22, 0x07	; 7
 24c:	82 e0       	ldi	r24, 0x02	; 2
 24e:	0e 94 36 00 	call	0x6c	; 0x6c <SET_Direction>
	SET_Direction(PORT_D,PIN_0,INPUT);  //RX pin
 252:	40 e0       	ldi	r20, 0x00	; 0
 254:	60 e0       	ldi	r22, 0x00	; 0
 256:	83 e0       	ldi	r24, 0x03	; 3
 258:	0e 94 36 00 	call	0x6c	; 0x6c <SET_Direction>
	SET_Direction(PORT_D,PIN_1,OUTPUT); //Tx pin
 25c:	41 e0       	ldi	r20, 0x01	; 1
 25e:	61 e0       	ldi	r22, 0x01	; 1
 260:	83 e0       	ldi	r24, 0x03	; 3
 262:	0e 94 36 00 	call	0x6c	; 0x6c <SET_Direction>
	USART_Init();
 266:	0e 94 49 01 	call	0x292	; 0x292 <USART_Init>
	
	while(1)
	{
		if(USART_Receive()=='1')
 26a:	0e 94 51 01 	call	0x2a2	; 0x2a2 <USART_Receive>
 26e:	81 33       	cpi	r24, 0x31	; 49
 270:	31 f4       	brne	.+12     	; 0x27e <main+0x36>
		{
			SET_Value(PORT_C,PIN_7,HIGH);
 272:	41 e0       	ldi	r20, 0x01	; 1
 274:	67 e0       	ldi	r22, 0x07	; 7
 276:	82 e0       	ldi	r24, 0x02	; 2
 278:	0e 94 ad 00 	call	0x15a	; 0x15a <SET_Value>
 27c:	f6 cf       	rjmp	.-20     	; 0x26a <main+0x22>
		}

		else if(USART_Receive()=='0')
 27e:	0e 94 51 01 	call	0x2a2	; 0x2a2 <USART_Receive>
 282:	80 33       	cpi	r24, 0x30	; 48
 284:	91 f7       	brne	.-28     	; 0x26a <main+0x22>
		{
			SET_Value(PORT_C,PIN_7,LOW);
 286:	40 e0       	ldi	r20, 0x00	; 0
 288:	67 e0       	ldi	r22, 0x07	; 7
 28a:	82 e0       	ldi	r24, 0x02	; 2
 28c:	0e 94 ad 00 	call	0x15a	; 0x15a <SET_Value>
 290:	ec cf       	rjmp	.-40     	; 0x26a <main+0x22>

00000292 <USART_Init>:


void USART_Send(u8 data)
{
	while(!GET_BIT(UCSRA,5));
		UDR = data;
 292:	52 98       	cbi	0x0a, 2	; 10
 294:	86 e8       	ldi	r24, 0x86	; 134
 296:	80 bd       	out	0x20, r24	; 32
 298:	83 e3       	ldi	r24, 0x33	; 51
 29a:	89 b9       	out	0x09, r24	; 9
 29c:	54 9a       	sbi	0x0a, 4	; 10
 29e:	53 9a       	sbi	0x0a, 3	; 10
 2a0:	08 95       	ret

000002a2 <USART_Receive>:
}


u8 USART_Receive()
{
		while(!GET_BIT(UCSRA,7));
 2a2:	5f 9b       	sbis	0x0b, 7	; 11
 2a4:	fe cf       	rjmp	.-4      	; 0x2a2 <USART_Receive>
			return UDR;
 2a6:	8c b1       	in	r24, 0x0c	; 12
	
 2a8:	08 95       	ret

000002aa <_exit>:
 2aa:	f8 94       	cli

000002ac <__stop_program>:
 2ac:	ff cf       	rjmp	.-2      	; 0x2ac <__stop_program>
